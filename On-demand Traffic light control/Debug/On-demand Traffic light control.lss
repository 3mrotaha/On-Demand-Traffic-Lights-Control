
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c2  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de1  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000977  00000000  00000000  0000346c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001815  00000000  00000000  00003de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_2>
   c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_10>
  2c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 23 02 	jmp	0x446	; 0x446 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "LIB/std_types.h"
#include "LIB/ErrorStates.h"
#include "MCAL/DIO/DIO_int.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	// set pin direction in PORTA to output
	DIO_enuSetPinDir(DIO_uint8_PORTA, DIO_uint8_PIN0, INPUT);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_enuSetPinDir>
	
	// get the value on the pin 0 of port A
	uint8 value; // a variable to store the value of the pin
	DIO_enuGetPinValue(DIO_uint8_PORTA, DIO_uint8_PIN0, &value);
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_enuGetPinValue>
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x22>

000000b6 <DIO_enuSetPinDir>:
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	08 f0       	brcs	.+2      	; 0xbc <DIO_enuSetPinDir+0x6>
  ba:	68 c0       	rjmp	.+208    	; 0x18c <DIO_enuSetPinDir+0xd6>
  bc:	68 30       	cpi	r22, 0x08	; 8
  be:	08 f0       	brcs	.+2      	; 0xc2 <DIO_enuSetPinDir+0xc>
  c0:	67 c0       	rjmp	.+206    	; 0x190 <DIO_enuSetPinDir+0xda>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	f1 f0       	breq	.+60     	; 0x102 <DIO_enuSetPinDir+0x4c>
  c6:	30 f0       	brcs	.+12     	; 0xd4 <DIO_enuSetPinDir+0x1e>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 f1       	breq	.+100    	; 0x130 <DIO_enuSetPinDir+0x7a>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_enuSetPinDir+0x1c>
  d0:	46 c0       	rjmp	.+140    	; 0x15e <DIO_enuSetPinDir+0xa8>
  d2:	60 c0       	rjmp	.+192    	; 0x194 <DIO_enuSetPinDir+0xde>
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	06 2e       	mov	r0, r22
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_enuSetPinDir+0x2c>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_enuSetPinDir+0x28>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
  ec:	8a b3       	in	r24, 0x1a	; 26
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_enuSetPinDir+0x40>
  f2:	44 0f       	add	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_enuSetPinDir+0x3c>
  fa:	48 2b       	or	r20, r24
  fc:	4a bb       	out	0x1a, r20	; 26
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	06 2e       	mov	r0, r22
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_enuSetPinDir+0x5a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_enuSetPinDir+0x56>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_enuSetPinDir+0x6e>
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_enuSetPinDir+0x6a>
 128:	48 2b       	or	r20, r24
 12a:	47 bb       	out	0x17, r20	; 23
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
 130:	24 b3       	in	r18, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	06 2e       	mov	r0, r22
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_enuSetPinDir+0x88>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_enuSetPinDir+0x84>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	84 bb       	out	0x14, r24	; 20
 148:	84 b3       	in	r24, 0x14	; 20
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_enuSetPinDir+0x9c>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_enuSetPinDir+0x98>
 156:	48 2b       	or	r20, r24
 158:	44 bb       	out	0x14, r20	; 20
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	06 2e       	mov	r0, r22
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_enuSetPinDir+0xb6>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_enuSetPinDir+0xb2>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	81 bb       	out	0x11, r24	; 17
 176:	81 b3       	in	r24, 0x11	; 17
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_enuSetPinDir+0xca>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_enuSetPinDir+0xc6>
 184:	48 2b       	or	r20, r24
 186:	41 bb       	out	0x11, r20	; 17
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	08 95       	ret
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	08 95       	ret
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	08 95       	ret

00000198 <DIO_enuGetPinValue>:

ErrorStates_t DIO_enuGetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 *Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	e8 f5       	brcc	.+122    	; 0x216 <DIO_enuGetPinValue+0x7e>
			if(Copy_uint8PinID <= DIO_PIN7){
 19c:	68 30       	cpi	r22, 0x08	; 8
 19e:	e8 f5       	brcc	.+122    	; 0x21a <DIO_enuGetPinValue+0x82>
				if(Copy_uint8Value != NULL){
 1a0:	41 15       	cp	r20, r1
 1a2:	51 05       	cpc	r21, r1
 1a4:	e1 f1       	breq	.+120    	; 0x21e <DIO_enuGetPinValue+0x86>
					switch(Copy_uint8PortID){
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 f0       	breq	.+36     	; 0x1ce <DIO_enuGetPinValue+0x36>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_enuGetPinValue+0x1e>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <DIO_enuGetPinValue+0x4e>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	29 f1       	breq	.+74     	; 0x1fe <DIO_enuGetPinValue+0x66>
 1b4:	36 c0       	rjmp	.+108    	; 0x222 <DIO_enuGetPinValue+0x8a>
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
 1b6:	89 b3       	in	r24, 0x19	; 25
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_enuGetPinValue+0x28>
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_enuGetPinValue+0x24>
 1c4:	81 70       	andi	r24, 0x01	; 1
 1c6:	fa 01       	movw	r30, r20
 1c8:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
			if(Copy_uint8PinID <= DIO_PIN7){
				if(Copy_uint8Value != NULL){
					switch(Copy_uint8PortID){
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
							break;
 1cc:	08 95       	ret
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
 1ce:	86 b3       	in	r24, 0x16	; 22
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_enuGetPinValue+0x40>
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_enuGetPinValue+0x3c>
 1dc:	81 70       	andi	r24, 0x01	; 1
 1de:	fa 01       	movw	r30, r20
 1e0:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTA:
							*Copy_uint8Value = BIT_MASK & (PINA >> Copy_uint8PinID);
							break;
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
							break;
 1e4:	08 95       	ret
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
 1e6:	83 b3       	in	r24, 0x13	; 19
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_enuGetPinValue+0x58>
 1ec:	95 95       	asr	r25
 1ee:	87 95       	ror	r24
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_enuGetPinValue+0x54>
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	fa 01       	movw	r30, r20
 1f8:	80 83       	st	Z, r24
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTB:
							*Copy_uint8Value = BIT_MASK & (PINB >> Copy_uint8PinID);
							break;
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
							break;
 1fc:	08 95       	ret
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
 1fe:	80 b3       	in	r24, 0x10	; 16
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_enuGetPinValue+0x70>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_enuGetPinValue+0x6c>
 20c:	81 70       	andi	r24, 0x01	; 1
 20e:	fa 01       	movw	r30, r20
 210:	80 83       	st	Z, r24
							break;
					}
					Local_enuErrorState = ES_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0
						case DIO_PORTC:
							*Copy_uint8Value = BIT_MASK & (PINC >> Copy_uint8PinID);
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
 214:	08 95       	ret
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
			}
		}
		else{
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	08 95       	ret
				else{
					Local_enuErrorState = ES_NULL_POINTER;
				}
			}
			else{
				Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	08 95       	ret
							break;
					}
					Local_enuErrorState = ES_OK;
				}
				else{
					Local_enuErrorState = ES_NULL_POINTER;
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	08 95       	ret
							break;
						case DIO_PORTD:
							*Copy_uint8Value = BIT_MASK & (PIND >> Copy_uint8PinID);
							break;
					}
					Local_enuErrorState = ES_OK;
 222:	80 e0       	ldi	r24, 0x00	; 0
			Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
		}


	return Local_enuErrorState;
}
 224:	08 95       	ret

00000226 <__vector_1>:
		Local_enuErrorStates = ES_NULL_POINTER;
	}
	return Local_enuErrorStates;
}

ISR(EX_INT0_VECT){
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT0] != NULL){
 248:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXINT_pvoidfuncCallBack>
 24c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXINT_pvoidfuncCallBack+0x1>
 250:	30 97       	sbiw	r30, 0x00	; 0
 252:	29 f0       	breq	.+10     	; 0x25e <__vector_1+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT0](EXINT_pvoidParameter[EXINT_INT0]);
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 258:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 25c:	09 95       	icall
	}
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_2>:

ISR(EX_INT1_VECT){
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	2f 93       	push	r18
 28c:	3f 93       	push	r19
 28e:	4f 93       	push	r20
 290:	5f 93       	push	r21
 292:	6f 93       	push	r22
 294:	7f 93       	push	r23
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	af 93       	push	r26
 29c:	bf 93       	push	r27
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT1] != NULL){
 2a2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <counts.1707>
 2a6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <counts.1707+0x1>
 2aa:	30 97       	sbiw	r30, 0x00	; 0
 2ac:	29 f0       	breq	.+10     	; 0x2b8 <__vector_2+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT1](EXINT_pvoidParameter[EXINT_INT1]);
 2ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <EXINT_pvoidfuncCallBack>
 2b2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <EXINT_pvoidfuncCallBack+0x1>
 2b6:	09 95       	icall
	}
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_3>:

ISR(EX_INT2_VECT){
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT2] != NULL){
 2fc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <counts.1707+0x2>
 300:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <counts.1707+0x3>
 304:	30 97       	sbiw	r30, 0x00	; 0
 306:	29 f0       	breq	.+10     	; 0x312 <__vector_3+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT2](EXINT_pvoidParameter[EXINT_INT2]);
 308:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counts.1707>
 30c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counts.1707+0x1>
 310:	09 95       	icall
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_11>:

	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
	return Local_enuErrorStates;
}

ISR(TIMER0_OVF_VECT){
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31

	static uint32 counts = 0;
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] != NULL){
 356:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TIMER0_ApfuncCalledFuncs>
 35a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TIMER0_ApfuncCalledFuncs+0x1>
 35e:	89 2b       	or	r24, r25
 360:	a1 f1       	breq	.+104    	; 0x3ca <__vector_11+0x96>
		counts++;
 362:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counts.1707>
 366:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counts.1707+0x1>
 36a:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <counts.1707+0x2>
 36e:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <counts.1707+0x3>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	a1 1d       	adc	r26, r1
 376:	b1 1d       	adc	r27, r1
 378:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counts.1707>
 37c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counts.1707+0x1>
 380:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <counts.1707+0x2>
 384:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <counts.1707+0x3>
		if(counts == TIMER0_uint32NumOVF){
 388:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <TIMER0_uint32NumOVF>
 38c:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <TIMER0_uint32NumOVF+0x1>
 390:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <TIMER0_uint32NumOVF+0x2>
 394:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <TIMER0_uint32NumOVF+0x3>
 398:	84 17       	cp	r24, r20
 39a:	95 07       	cpc	r25, r21
 39c:	a6 07       	cpc	r26, r22
 39e:	b7 07       	cpc	r27, r23
 3a0:	a1 f4       	brne	.+40     	; 0x3ca <__vector_11+0x96>
			counts = 0;
 3a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counts.1707>
 3a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counts.1707+0x1>
 3aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counts.1707+0x2>
 3ae:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counts.1707+0x3>
			TCNT0 = TIMER0_uint32Preload;
 3b2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TIMER0_uint32Preload>
 3b6:	82 bf       	out	0x32, r24	; 50
			TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF](TIMER0_ApvoidParameters[TIMER0_INT_OVF]);
 3b8:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TIMER0_ApfuncCalledFuncs>
 3bc:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <TIMER0_ApfuncCalledFuncs+0x1>
 3c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TIMER0_ApvoidParameters>
 3c4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TIMER0_ApvoidParameters+0x1>
 3c8:	09 95       	icall
		}
	}
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_10>:

ISR(TIMER0_COMP_VECT){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP] != NULL){
 40e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TIMER0_ApfuncCalledFuncs+0x2>
 412:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TIMER0_ApfuncCalledFuncs+0x3>
 416:	30 97       	sbiw	r30, 0x00	; 0
 418:	29 f0       	breq	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP](TIMER0_ApvoidParameters[TIMER0_INT_COMP]);
 41a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <TIMER0_ApvoidParameters+0x2>
 41e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <TIMER0_ApvoidParameters+0x3>
 422:	09 95       	icall
	}
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <_exit>:
 446:	f8 94       	cli

00000448 <__stop_program>:
 448:	ff cf       	rjmp	.-2      	; 0x448 <__stop_program>
