
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000010ce  00001162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080007e  0080007e  00001180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fa5  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7c  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136b  00000000  00000000  00003f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000564  00000000  00000000  00005270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1c  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a96  00000000  00000000  000062f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007d86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_1>
       8:	0c 94 14 04 	jmp	0x828	; 0x828 <__vector_2>
       c:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_10>
      2c:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 18 02 	call	0x430	; 0x430 <main>
      8a:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <changeTrafficLed>:
	return ES_OK;
}


void changeTrafficLed(void){
	if(ledOrder <= 0){
      92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      96:	81 11       	cpse	r24, r1
      98:	24 c0       	rjmp	.+72     	; 0xe2 <changeTrafficLed+0x50>
		carR_flag = 1;
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end>
		carG_flag = 0;
      a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carG_flag>
		carY_falg = 0;
      a4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <carY_falg>
	TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
}


static inline void carStop(void){
	LED_enuTurnON(CAR_RED_LED);
      a8:	83 e0       	ldi	r24, 0x03	; 3
      aa:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(CAR_YELLOW_LED);
      ae:	84 e0       	ldi	r24, 0x04	; 4
      b0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(CAR_GREEN_LED);
      b4:	85 e0       	ldi	r24, 0x05	; 5
      b6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
}
/*
	this function is used to lighten the green led for the human to pass
*/
static inline void pedestrainPass(void){
	LED_enuTurnOFF(PEDESTRAIN_RED_LED);
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnON(PEDESTRAIN_GREEN_LED);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
		carG_flag = 0;
		carY_falg = 0;
		
		carStop();
		pedestrainPass();
		TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	49 e4       	ldi	r20, 0x49	; 73
      d2:	50 e0       	ldi	r21, 0x00	; 0
      d4:	68 e8       	ldi	r22, 0x88	; 136
      d6:	73 e1       	ldi	r23, 0x13	; 19
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_enuSetAsyncDelay>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <changeTrafficLed+0xda>
	}
	else if((ledOrder >= 1 && ledOrder < 20) || (ledOrder > 20 && ledOrder < 41)){
      e2:	9f ef       	ldi	r25, 0xFF	; 255
      e4:	98 0f       	add	r25, r24
      e6:	93 31       	cpi	r25, 0x13	; 19
      e8:	20 f0       	brcs	.+8      	; 0xf2 <changeTrafficLed+0x60>
      ea:	9b ee       	ldi	r25, 0xEB	; 235
      ec:	98 0f       	add	r25, r24
      ee:	94 31       	cpi	r25, 0x14	; 20
      f0:	c0 f4       	brcc	.+48     	; 0x122 <changeTrafficLed+0x90>
		carY_falg = 1;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <carY_falg>
		carR_flag = 0;
      f8:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
		carG_flag = 0;
      fc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carG_flag>

/*
	this function is used to lighten the Yellow led for the cars to be ready to go or stop
*/
static inline void carReady(void){
	LED_enuToggleState(CAR_YELLOW_LED);
     100:	84 e0       	ldi	r24, 0x04	; 4
     102:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>

/*
	this function is used to blinks the Yellow led for the human to be ready to go or stop
*/
static inline void pedestrainReady(void){
	LED_enuToggleState(PEDESTRAIN_YELLOW_LED);
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>
		carR_flag = 0;
		carG_flag = 0;
		
		carReady();
		pedestrainReady();
		TIMER0_enuSetAsyncDelay(BLINKING_TIME, &changeTrafficLed, NULL);
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	49 e4       	ldi	r20, 0x49	; 73
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	6a ef       	ldi	r22, 0xFA	; 250
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_enuSetAsyncDelay>
     120:	25 c0       	rjmp	.+74     	; 0x16c <changeTrafficLed+0xda>
	}
	else if(ledOrder >= 20 && ledOrder < 21){
     122:	84 31       	cpi	r24, 0x14	; 20
     124:	19 f5       	brne	.+70     	; 0x16c <changeTrafficLed+0xda>
		carG_flag = 1;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carG_flag>
		carR_flag = 0;
     12c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
		carY_falg = 0;
     130:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <carY_falg>

/*
	this function is used to light the green led for the cars to pass
*/ 
static inline void carsPass(void){
	LED_enuTurnON(CAR_GREEN_LED);
     134:	85 e0       	ldi	r24, 0x05	; 5
     136:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(CAR_YELLOW_LED);
     13a:	84 e0       	ldi	r24, 0x04	; 4
     13c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(CAR_RED_LED);
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
}
/*
	this function is used to lighted the RED led for the human to stop until the cars stop
*/ 
static inline void pedestrainStop(void){
	LED_enuTurnON(PEDESTRAIN_RED_LED);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_GREEN_LED);
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
		carR_flag = 0;
		carY_falg = 0;
		
		carsPass();
		pedestrainStop();
		TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	49 e4       	ldi	r20, 0x49	; 73
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	68 e8       	ldi	r22, 0x88	; 136
     162:	73 e1       	ldi	r23, 0x13	; 19
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_enuSetAsyncDelay>
	}
	
	ledOrder++;
     16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     170:	8f 5f       	subi	r24, 0xFF	; 255
     172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
	if(ledOrder >= 41){
     176:	89 32       	cpi	r24, 0x29	; 41
     178:	10 f0       	brcs	.+4      	; 0x17e <changeTrafficLed+0xec>
		ledOrder = 0;
     17a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
     17e:	08 95       	ret

00000180 <on_Press>:
	
	
}


void on_Press(void){
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
	if(carR_flag == 1){
     188:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	81 f4       	brne	.+32     	; 0x1b0 <on_Press+0x30>
}
/*
	this function is used to lighten the green led for the human to pass
*/
static inline void pedestrainPass(void){
	LED_enuTurnOFF(PEDESTRAIN_RED_LED);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnON(PEDESTRAIN_GREEN_LED);
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>

void on_Press(void){
	if(carR_flag == 1){
		// turn on green for pedestrian for 5 s
		pedestrainPass();
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
     1a2:	68 e8       	ldi	r22, 0x88	; 136
     1a4:	73 e1       	ldi	r23, 0x13	; 19
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_enuSetSyncDelay>
     1ae:	44 c0       	rjmp	.+136    	; 0x238 <on_Press+0xb8>
	}
	else if(carG_flag == 1 || carY_falg == 1){
     1b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carG_flag>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	21 f0       	breq	.+8      	; 0x1c0 <on_Press+0x40>
     1b8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <carY_falg>
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	e1 f5       	brne	.+120    	; 0x238 <on_Press+0xb8>
}
/*
	this function is used to lighted the RED led for the human to stop until the cars stop
*/ 
static inline void pedestrainStop(void){
	LED_enuTurnON(PEDESTRAIN_RED_LED);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_GREEN_LED);
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
	}
	else if(carG_flag == 1 || carY_falg == 1){
		// turn on the red and yellow for pedestrian for 5 s, after that turn the cars red and the pedestrian green for 5 s
		pedestrainStop();
		for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
     1d2:	c1 2c       	mov	r12, r1
     1d4:	d1 2c       	mov	r13, r1
     1d6:	76 01       	movw	r14, r12
     1d8:	11 c0       	rjmp	.+34     	; 0x1fc <on_Press+0x7c>

/*
	this function is used to blinks the Yellow led for the human to be ready to go or stop
*/
static inline void pedestrainReady(void){
	LED_enuToggleState(PEDESTRAIN_YELLOW_LED);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>

/*
	this function is used to lighten the Yellow led for the cars to be ready to go or stop
*/
static inline void carReady(void){
	LED_enuToggleState(CAR_YELLOW_LED);
     1e0:	84 e0       	ldi	r24, 0x04	; 4
     1e2:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>
		// turn on the red and yellow for pedestrian for 5 s, after that turn the cars red and the pedestrian green for 5 s
		pedestrainStop();
		for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
			pedestrainReady();
			carReady();
			TIMER0_enuSetSyncDelay(BLINKING_TIME);
     1e6:	6a ef       	ldi	r22, 0xFA	; 250
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_enuSetSyncDelay>
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
	}
	else if(carG_flag == 1 || carY_falg == 1){
		// turn on the red and yellow for pedestrian for 5 s, after that turn the cars red and the pedestrian green for 5 s
		pedestrainStop();
		for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
     1f2:	8f ef       	ldi	r24, 0xFF	; 255
     1f4:	c8 1a       	sub	r12, r24
     1f6:	d8 0a       	sbc	r13, r24
     1f8:	e8 0a       	sbc	r14, r24
     1fa:	f8 0a       	sbc	r15, r24
     1fc:	85 e1       	ldi	r24, 0x15	; 21
     1fe:	c8 16       	cp	r12, r24
     200:	d1 04       	cpc	r13, r1
     202:	e1 04       	cpc	r14, r1
     204:	f1 04       	cpc	r15, r1
     206:	48 f3       	brcs	.-46     	; 0x1da <on_Press+0x5a>
	TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
}


static inline void carStop(void){
	LED_enuTurnON(CAR_RED_LED);
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(CAR_YELLOW_LED);
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(CAR_GREEN_LED);
     214:	85 e0       	ldi	r24, 0x05	; 5
     216:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
}
/*
	this function is used to lighten the green led for the human to pass
*/
static inline void pedestrainPass(void){
	LED_enuTurnOFF(PEDESTRAIN_RED_LED);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnON(PEDESTRAIN_GREEN_LED);
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
			carReady();
			TIMER0_enuSetSyncDelay(BLINKING_TIME);
		}
		carStop();
		pedestrainPass();
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
     22c:	68 e8       	ldi	r22, 0x88	; 136
     22e:	73 e1       	ldi	r23, 0x13	; 19
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_enuSetSyncDelay>
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
	}
	else if(carG_flag == 1 || carY_falg == 1){
		// turn on the red and yellow for pedestrian for 5 s, after that turn the cars red and the pedestrian green for 5 s
		pedestrainStop();
		for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
     238:	c1 2c       	mov	r12, r1
     23a:	d1 2c       	mov	r13, r1
     23c:	76 01       	movw	r14, r12
     23e:	11 c0       	rjmp	.+34     	; 0x262 <on_Press+0xe2>

/*
	this function is used to blinks the Yellow led for the human to be ready to go or stop
*/
static inline void pedestrainReady(void){
	LED_enuToggleState(PEDESTRAIN_YELLOW_LED);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>

/*
	this function is used to lighten the Yellow led for the cars to be ready to go or stop
*/
static inline void carReady(void){
	LED_enuToggleState(CAR_YELLOW_LED);
     246:	84 e0       	ldi	r24, 0x04	; 4
     248:	0e 94 06 02 	call	0x40c	; 0x40c <LED_enuToggleState>
	
	
	for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
		pedestrainReady();
		carReady();
		TIMER0_enuSetSyncDelay(BLINKING_TIME);
     24c:	6a ef       	ldi	r22, 0xFA	; 250
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_enuSetSyncDelay>
		pedestrainPass();
		TIMER0_enuSetSyncDelay(TIME_FOR_LED_STATE);
	}
	
	
	for(uint32 Iterator = 0; Iterator < BLINKING_COUNTS(TIME_FOR_LED_STATE, BLINKING_TIME); Iterator++){
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	c8 1a       	sub	r12, r24
     25c:	d8 0a       	sbc	r13, r24
     25e:	e8 0a       	sbc	r14, r24
     260:	f8 0a       	sbc	r15, r24
     262:	85 e1       	ldi	r24, 0x15	; 21
     264:	c8 16       	cp	r12, r24
     266:	d1 04       	cpc	r13, r1
     268:	e1 04       	cpc	r14, r1
     26a:	f1 04       	cpc	r15, r1
     26c:	48 f3       	brcs	.-46     	; 0x240 <on_Press+0xc0>

/*
	this function is used to light the green led for the cars to pass
*/ 
static inline void carsPass(void){
	LED_enuTurnON(CAR_GREEN_LED);
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(CAR_YELLOW_LED);
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(CAR_RED_LED);
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
}
/*
	this function is used to lighted the RED led for the human to stop until the cars stop
*/ 
static inline void pedestrainStop(void){
	LED_enuTurnON(PEDESTRAIN_RED_LED);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_GREEN_LED);
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
		TIMER0_enuSetSyncDelay(BLINKING_TIME);
	}
	carsPass();
	pedestrainStop();
	// reset the flags to the car pass state
	ledOrder = 20, carG_flag = 1, carR_flag = 0, carY_falg = 0;
     292:	84 e1       	ldi	r24, 0x14	; 20
     294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carG_flag>
     29e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
     2a2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <carY_falg>
	TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	49 e4       	ldi	r20, 0x49	; 73
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	68 e8       	ldi	r22, 0x88	; 136
     2b0:	73 e1       	ldi	r23, 0x13	; 19
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_enuSetAsyncDelay>
}
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	08 95       	ret

000002c4 <App_enuStart>:

uint8 carY_falg = 0, carR_flag = 0, carG_flag = 1;
uint8 ledOrder = 21;
ErrorStates_t App_enuStart(void){
	ErrorStates_t local_enuErrorStates = ES_NOK;
	TIMER0_enuInit();
     2c4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <TIMER0_enuInit>
	EXINT_enuInit();
     2c8:	0e 94 3f 03 	call	0x67e	; 0x67e <EXINT_enuInit>
	LED_enuInit();
     2cc:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_enuInit>
	TIMER0_enuSetAsyncDelay(TIME_FOR_LED_STATE, &changeTrafficLed, NULL);
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	49 e4       	ldi	r20, 0x49	; 73
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	68 e8       	ldi	r22, 0x88	; 136
     2da:	73 e1       	ldi	r23, 0x13	; 19
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 21 05 	call	0xa42	; 0xa42 <TIMER0_enuSetAsyncDelay>
	EXINT_enuCallBack(&on_Press, NULL, EXINTuint8_INT0);
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	80 ec       	ldi	r24, 0xC0	; 192
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 bd 03 	call	0x77a	; 0x77a <EXINT_enuCallBack>

/*
	this function is used to light the green led for the cars to pass
*/ 
static inline void carsPass(void){
	LED_enuTurnON(CAR_GREEN_LED);
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(CAR_YELLOW_LED);
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(CAR_RED_LED);
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
}
/*
	this function is used to lighted the RED led for the human to stop until the cars stop
*/ 
static inline void pedestrainStop(void){
	LED_enuTurnON(PEDESTRAIN_RED_LED);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 ac 01 	call	0x358	; 0x358 <LED_enuTurnON>
	LED_enuTurnOFF(PEDESTRAIN_YELLOW_LED);
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	LED_enuTurnOFF(PEDESTRAIN_GREEN_LED);
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LED_enuTurnOFF>
	
	// initial state of pedestrian lights
	pedestrainStop();
	
	return ES_OK;
}
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret

0000031a <LED_enuInit>:

#include "../../MCAL/DIO/DIO_int.h"

extern LED_t SW_AstrLEDs[LED_NUM];

ErrorStates_t LED_enuInit(void){
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	10 e0       	ldi	r17, 0x00	; 0
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	13 c0       	rjmp	.+38     	; 0x34c <LED_enuInit+0x32>
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(SW_AstrLEDs != NULL){
		uint8 Local_uint8Iterator;
		for(Local_uint8Iterator = 0; Local_uint8Iterator < LED_NUM; Local_uint8Iterator++){
			Local_enuErrorStates = DIO_enuSetPinDir(SW_AstrLEDs[Local_uint8Iterator].SW_uint8PORTID, SW_AstrLEDs[Local_uint8Iterator].SW_uint8PinID, OUTPUT);
     326:	c1 2f       	mov	r28, r17
     328:	d0 e0       	ldi	r29, 0x00	; 0
     32a:	cc 0f       	add	r28, r28
     32c:	dd 1f       	adc	r29, r29
     32e:	cc 0f       	add	r28, r28
     330:	dd 1f       	adc	r29, r29
     332:	ce 59       	subi	r28, 0x9E	; 158
     334:	df 4f       	sbci	r29, 0xFF	; 255
     336:	69 81       	ldd	r22, Y+1	; 0x01
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	88 81       	ld	r24, Y
     33c:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_enuSetPinDir>
			Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Local_uint8Iterator].SW_uint8PORTID, SW_AstrLEDs[Local_uint8Iterator].SW_uint8PinID, SW_AstrLEDs[Local_uint8Iterator].SW_uint8State);
     340:	4b 81       	ldd	r20, Y+3	; 0x03
     342:	69 81       	ldd	r22, Y+1	; 0x01
     344:	88 81       	ld	r24, Y
     346:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_enuSetPinValue>

ErrorStates_t LED_enuInit(void){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(SW_AstrLEDs != NULL){
		uint8 Local_uint8Iterator;
		for(Local_uint8Iterator = 0; Local_uint8Iterator < LED_NUM; Local_uint8Iterator++){
     34a:	1f 5f       	subi	r17, 0xFF	; 255
     34c:	16 30       	cpi	r17, 0x06	; 6
     34e:	58 f3       	brcs	.-42     	; 0x326 <LED_enuInit+0xc>
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
	}

	return Local_enuErrorStates;
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	08 95       	ret

00000358 <LED_enuTurnON>:

ErrorStates_t LED_enuTurnON(uint8 Copy_uint8LedID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_uint8LedID < LED_NUM){
     358:	86 30       	cpi	r24, 0x06	; 6
     35a:	38 f5       	brcc	.+78     	; 0x3aa <LED_enuTurnON+0x52>
		if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SINK){
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	ee 0f       	add	r30, r30
     366:	ff 1f       	adc	r31, r31
     368:	ee 59       	subi	r30, 0x9E	; 158
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	22 81       	ldd	r18, Z+2	; 0x02
     36e:	28 30       	cpi	r18, 0x08	; 8
     370:	69 f4       	brne	.+26     	; 0x38c <LED_enuTurnON+0x34>
			Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, LOW);
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	fc 01       	movw	r30, r24
     37c:	ee 59       	subi	r30, 0x9E	; 158
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	61 81       	ldd	r22, Z+1	; 0x01
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_enuSetPinValue>
     38a:	08 95       	ret
		}
		else if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SOURCE){
     38c:	29 30       	cpi	r18, 0x09	; 9
     38e:	79 f4       	brne	.+30     	; 0x3ae <LED_enuTurnON+0x56>
			Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, HIGH);
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	fc 01       	movw	r30, r24
     39a:	ee 59       	subi	r30, 0x9E	; 158
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	61 81       	ldd	r22, Z+1	; 0x01
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	80 81       	ld	r24, Z
     3a4:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_enuSetPinValue>
     3a8:	08 95       	ret
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorStates = ES_OUT_OF_RANGE;
     3aa:	8a e0       	ldi	r24, 0x0A	; 10
     3ac:	08 95       	ret
		}
		else if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SOURCE){
			Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, HIGH);
		}
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
     3ae:	8a e0       	ldi	r24, 0x0A	; 10
	else{
		Local_enuErrorStates = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorStates;
}
     3b0:	08 95       	ret

000003b2 <LED_enuTurnOFF>:

ErrorStates_t LED_enuTurnOFF(uint8 Copy_uint8LedID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;

	if(Copy_uint8LedID < LED_NUM){
     3b2:	86 30       	cpi	r24, 0x06	; 6
     3b4:	38 f5       	brcc	.+78     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SINK){
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	ee 59       	subi	r30, 0x9E	; 158
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	22 81       	ldd	r18, Z+2	; 0x02
     3c8:	28 30       	cpi	r18, 0x08	; 8
     3ca:	69 f4       	brne	.+26     	; 0x3e6 <LED_enuTurnOFF+0x34>
				Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, HIGH);
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	fc 01       	movw	r30, r24
     3d6:	ee 59       	subi	r30, 0x9E	; 158
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	61 81       	ldd	r22, Z+1	; 0x01
     3dc:	41 e0       	ldi	r20, 0x01	; 1
     3de:	80 81       	ld	r24, Z
     3e0:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_enuSetPinValue>
     3e4:	08 95       	ret
			}
			else if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SOURCE){
     3e6:	29 30       	cpi	r18, 0x09	; 9
     3e8:	79 f4       	brne	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, LOW);
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	fc 01       	movw	r30, r24
     3f4:	ee 59       	subi	r30, 0x9E	; 158
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	61 81       	ldd	r22, Z+1	; 0x01
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_enuSetPinValue>
     402:	08 95       	ret
			else{
				Local_enuErrorStates = ES_OUT_OF_RANGE;
			}
		}
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	08 95       	ret
			}
			else if(SW_AstrLEDs[Copy_uint8LedID].SW_uint8Connection == LED_uint8SOURCE){
				Local_enuErrorStates = DIO_enuSetPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID, LOW);
			}
			else{
				Local_enuErrorStates = ES_OUT_OF_RANGE;
     408:	8a e0       	ldi	r24, 0x0A	; 10
		else{
			Local_enuErrorStates = ES_OUT_OF_RANGE;
		}

	return Local_enuErrorStates;
}
     40a:	08 95       	ret

0000040c <LED_enuToggleState>:

ErrorStates_t LED_enuToggleState(uint8 Copy_uint8LedID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;

	if(Copy_uint8LedID < LED_NUM){
     40c:	86 30       	cpi	r24, 0x06	; 6
     40e:	70 f4       	brcc	.+28     	; 0x42c <LED_enuToggleState+0x20>
		DIO_enuTogPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID);
     410:	e8 2f       	mov	r30, r24
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ee 59       	subi	r30, 0x9E	; 158
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	61 81       	ldd	r22, Z+1	; 0x01
     422:	80 81       	ld	r24, Z
     424:	0e 94 fd 02 	call	0x5fa	; 0x5fa <DIO_enuTogPinValue>

	return Local_enuErrorStates;
}

ErrorStates_t LED_enuToggleState(uint8 Copy_uint8LedID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	08 95       	ret

	if(Copy_uint8LedID < LED_NUM){
		DIO_enuTogPinValue(SW_AstrLEDs[Copy_uint8LedID].SW_uint8PORTID, SW_AstrLEDs[Copy_uint8LedID].SW_uint8PinID);
	}
	else{
		Local_enuErrorStates = ES_OUT_OF_RANGE;
     42c:	8a e0       	ldi	r24, 0x0A	; 10
	}

	return Local_enuErrorStates;
     42e:	08 95       	ret

00000430 <main>:


int main(void)
{

	App_enuStart();
     430:	0e 94 62 01 	call	0x2c4	; 0x2c4 <App_enuStart>
     434:	ff cf       	rjmp	.-2      	; 0x434 <main+0x4>

00000436 <DIO_enuSetPinDir>:
}

ErrorStates_t DIO_enuSetPinDir(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
     436:	84 30       	cpi	r24, 0x04	; 4
     438:	08 f0       	brcs	.+2      	; 0x43c <DIO_enuSetPinDir+0x6>
     43a:	68 c0       	rjmp	.+208    	; 0x50c <DIO_enuSetPinDir+0xd6>
		if(Copy_uint8PinID <= DIO_PIN7){
     43c:	68 30       	cpi	r22, 0x08	; 8
     43e:	08 f0       	brcs	.+2      	; 0x442 <DIO_enuSetPinDir+0xc>
     440:	67 c0       	rjmp	.+206    	; 0x510 <DIO_enuSetPinDir+0xda>
			switch(Copy_uint8PortID){
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	f1 f0       	breq	.+60     	; 0x482 <DIO_enuSetPinDir+0x4c>
     446:	30 f0       	brcs	.+12     	; 0x454 <DIO_enuSetPinDir+0x1e>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	91 f1       	breq	.+100    	; 0x4b0 <DIO_enuSetPinDir+0x7a>
     44c:	83 30       	cpi	r24, 0x03	; 3
     44e:	09 f4       	brne	.+2      	; 0x452 <DIO_enuSetPinDir+0x1c>
     450:	46 c0       	rjmp	.+140    	; 0x4de <DIO_enuSetPinDir+0xa8>
     452:	60 c0       	rjmp	.+192    	; 0x514 <DIO_enuSetPinDir+0xde>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
     454:	2a b3       	in	r18, 0x1a	; 26
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	06 2e       	mov	r0, r22
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_enuSetPinDir+0x2c>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_enuSetPinDir+0x28>
     466:	80 95       	com	r24
     468:	82 23       	and	r24, r18
     46a:	8a bb       	out	0x1a, r24	; 26
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
     46c:	8a b3       	in	r24, 0x1a	; 26
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_enuSetPinDir+0x40>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_enuSetPinDir+0x3c>
     47a:	48 2b       	or	r20, r24
     47c:	4a bb       	out	0x1a, r20	; 26
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     47e:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     480:	08 95       	ret
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
     482:	27 b3       	in	r18, 0x17	; 23
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	06 2e       	mov	r0, r22
     48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_enuSetPinDir+0x5a>
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	0a 94       	dec	r0
     492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_enuSetPinDir+0x56>
     494:	80 95       	com	r24
     496:	82 23       	and	r24, r18
     498:	87 bb       	out	0x17, r24	; 23
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
     49a:	87 b3       	in	r24, 0x17	; 23
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_enuSetPinDir+0x6e>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	6a 95       	dec	r22
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_enuSetPinDir+0x6a>
     4a8:	48 2b       	or	r20, r24
     4aa:	47 bb       	out	0x17, r20	; 23
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     4ae:	08 95       	ret
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
     4b0:	24 b3       	in	r18, 0x14	; 20
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	06 2e       	mov	r0, r22
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_enuSetPinDir+0x88>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	0a 94       	dec	r0
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_enuSetPinDir+0x84>
     4c2:	80 95       	com	r24
     4c4:	82 23       	and	r24, r18
     4c6:	84 bb       	out	0x14, r24	; 20
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
     4c8:	84 b3       	in	r24, 0x14	; 20
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_enuSetPinDir+0x9c>
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	6a 95       	dec	r22
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_enuSetPinDir+0x98>
     4d6:	48 2b       	or	r20, r24
     4d8:	44 bb       	out	0x14, r20	; 20
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     4da:	80 e0       	ldi	r24, 0x00	; 0
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     4dc:	08 95       	ret
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
     4de:	21 b3       	in	r18, 0x11	; 17
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	06 2e       	mov	r0, r22
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_enuSetPinDir+0xb6>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_enuSetPinDir+0xb2>
     4f0:	80 95       	com	r24
     4f2:	82 23       	and	r24, r18
     4f4:	81 bb       	out	0x11, r24	; 17
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
     4f6:	81 b3       	in	r24, 0x11	; 17
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_enuSetPinDir+0xca>
     4fc:	44 0f       	add	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	6a 95       	dec	r22
     502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_enuSetPinDir+0xc6>
     504:	48 2b       	or	r20, r24
     506:	41 bb       	out	0x11, r20	; 17
					break;
			}
			Local_enuErrorState = ES_OK;
     508:	80 e0       	ldi	r24, 0x00	; 0
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     50a:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	08 95       	ret
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     514:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     516:	08 95       	ret

00000518 <DIO_enuSetPinValue>:

ErrorStates_t DIO_enuSetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
     518:	84 30       	cpi	r24, 0x04	; 4
     51a:	08 f0       	brcs	.+2      	; 0x51e <DIO_enuSetPinValue+0x6>
     51c:	68 c0       	rjmp	.+208    	; 0x5ee <DIO_enuSetPinValue+0xd6>
		if(Copy_uint8PinID <= DIO_PIN7){
     51e:	68 30       	cpi	r22, 0x08	; 8
     520:	08 f0       	brcs	.+2      	; 0x524 <DIO_enuSetPinValue+0xc>
     522:	67 c0       	rjmp	.+206    	; 0x5f2 <DIO_enuSetPinValue+0xda>
			switch(Copy_uint8PortID){
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	f1 f0       	breq	.+60     	; 0x564 <DIO_enuSetPinValue+0x4c>
     528:	30 f0       	brcs	.+12     	; 0x536 <DIO_enuSetPinValue+0x1e>
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	91 f1       	breq	.+100    	; 0x592 <DIO_enuSetPinValue+0x7a>
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_enuSetPinValue+0x1c>
     532:	46 c0       	rjmp	.+140    	; 0x5c0 <DIO_enuSetPinValue+0xa8>
     534:	60 c0       	rjmp	.+192    	; 0x5f6 <DIO_enuSetPinValue+0xde>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
     536:	2b b3       	in	r18, 0x1b	; 27
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	06 2e       	mov	r0, r22
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_enuSetPinValue+0x2c>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_enuSetPinValue+0x28>
     548:	80 95       	com	r24
     54a:	82 23       	and	r24, r18
     54c:	8b bb       	out	0x1b, r24	; 27
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
     54e:	8b b3       	in	r24, 0x1b	; 27
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_enuSetPinValue+0x40>
     554:	44 0f       	add	r20, r20
     556:	55 1f       	adc	r21, r21
     558:	6a 95       	dec	r22
     55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_enuSetPinValue+0x3c>
     55c:	48 2b       	or	r20, r24
     55e:	4b bb       	out	0x1b, r20	; 27
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     560:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     562:	08 95       	ret
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
     564:	28 b3       	in	r18, 0x18	; 24
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	06 2e       	mov	r0, r22
     56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_enuSetPinValue+0x5a>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	0a 94       	dec	r0
     574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_enuSetPinValue+0x56>
     576:	80 95       	com	r24
     578:	82 23       	and	r24, r18
     57a:	88 bb       	out	0x18, r24	; 24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
     57c:	88 b3       	in	r24, 0x18	; 24
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_enuSetPinValue+0x6e>
     582:	44 0f       	add	r20, r20
     584:	55 1f       	adc	r21, r21
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_enuSetPinValue+0x6a>
     58a:	48 2b       	or	r20, r24
     58c:	48 bb       	out	0x18, r20	; 24
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     58e:	80 e0       	ldi	r24, 0x00	; 0
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     590:	08 95       	ret
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
     592:	25 b3       	in	r18, 0x15	; 21
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	06 2e       	mov	r0, r22
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_enuSetPinValue+0x88>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	0a 94       	dec	r0
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_enuSetPinValue+0x84>
     5a4:	80 95       	com	r24
     5a6:	82 23       	and	r24, r18
     5a8:	85 bb       	out	0x15, r24	; 21
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
     5aa:	85 b3       	in	r24, 0x15	; 21
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_enuSetPinValue+0x9c>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_enuSetPinValue+0x98>
     5b8:	48 2b       	or	r20, r24
     5ba:	45 bb       	out	0x15, r20	; 21
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     5bc:	80 e0       	ldi	r24, 0x00	; 0
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     5be:	08 95       	ret
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
     5c0:	22 b3       	in	r18, 0x12	; 18
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	06 2e       	mov	r0, r22
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enuSetPinValue+0xb6>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	0a 94       	dec	r0
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enuSetPinValue+0xb2>
     5d2:	80 95       	com	r24
     5d4:	82 23       	and	r24, r18
     5d6:	82 bb       	out	0x12, r24	; 18
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
     5d8:	82 b3       	in	r24, 0x12	; 18
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_enuSetPinValue+0xca>
     5de:	44 0f       	add	r20, r20
     5e0:	55 1f       	adc	r21, r21
     5e2:	6a 95       	dec	r22
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_enuSetPinValue+0xc6>
     5e6:	48 2b       	or	r20, r24
     5e8:	42 bb       	out	0x12, r20	; 18
					break;
			}
			Local_enuErrorState = ES_OK;
     5ea:	80 e0       	ldi	r24, 0x00	; 0
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
     5ec:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	08 95       	ret
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     5f8:	08 95       	ret

000005fa <DIO_enuTogPinValue>:

ErrorStates_t DIO_enuTogPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	d0 f5       	brcc	.+116    	; 0x672 <DIO_enuTogPinValue+0x78>
		if(Copy_uint8PinID <= DIO_PIN7){
     5fe:	68 30       	cpi	r22, 0x08	; 8
     600:	d0 f5       	brcc	.+116    	; 0x676 <DIO_enuTogPinValue+0x7c>
			switch(Copy_uint8PortID){
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 f0       	breq	.+36     	; 0x62a <DIO_enuTogPinValue+0x30>
     606:	28 f0       	brcs	.+10     	; 0x612 <DIO_enuTogPinValue+0x18>
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	d9 f0       	breq	.+54     	; 0x642 <DIO_enuTogPinValue+0x48>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	29 f1       	breq	.+74     	; 0x65a <DIO_enuTogPinValue+0x60>
     610:	34 c0       	rjmp	.+104    	; 0x67a <DIO_enuTogPinValue+0x80>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
     612:	2b b3       	in	r18, 0x1b	; 27
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_enuTogPinValue+0x24>
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	6a 95       	dec	r22
     620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_enuTogPinValue+0x20>
     622:	82 27       	eor	r24, r18
     624:	8b bb       	out	0x1b, r24	; 27
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     626:	80 e0       	ldi	r24, 0x00	; 0
	if(Copy_uint8PortID <= DIO_PORTD){
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
					break;
     628:	08 95       	ret
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
     62a:	28 b3       	in	r18, 0x18	; 24
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_enuTogPinValue+0x3c>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	6a 95       	dec	r22
     638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_enuTogPinValue+0x38>
     63a:	82 27       	eor	r24, r18
     63c:	88 bb       	out	0x18, r24	; 24
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     63e:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
					break;
     640:	08 95       	ret
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
     642:	25 b3       	in	r18, 0x15	; 21
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_enuTogPinValue+0x54>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	6a 95       	dec	r22
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_enuTogPinValue+0x50>
     652:	82 27       	eor	r24, r18
     654:	85 bb       	out	0x15, r24	; 21
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     656:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
					break;
     658:	08 95       	ret
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
     65a:	22 b3       	in	r18, 0x12	; 18
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_enuTogPinValue+0x6c>
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_enuTogPinValue+0x68>
     66a:	82 27       	eor	r24, r18
     66c:	82 bb       	out	0x12, r24	; 18
					break;
			}
			Local_enuErrorState = ES_OK;
     66e:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
     670:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	08 95       	ret
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
     67a:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     67c:	08 95       	ret

0000067e <EXINT_enuInit>:
	}
	else{
		Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
	}
	return Local_enuErrorStates;
}
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	77 c0       	rjmp	.+238    	; 0x772 <EXINT_enuInit+0xf4>
     684:	29 2f       	mov	r18, r25
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	f9 01       	movw	r30, r18
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	e2 0f       	add	r30, r18
     690:	f3 1f       	adc	r31, r19
     692:	e6 58       	subi	r30, 0x86	; 134
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	41 81       	ldd	r20, Z+1	; 0x01
     698:	40 35       	cpi	r20, 0x50	; 80
     69a:	09 f0       	breq	.+2      	; 0x69e <EXINT_enuInit+0x20>
     69c:	69 c0       	rjmp	.+210    	; 0x770 <EXINT_enuInit+0xf2>
     69e:	85 b7       	in	r24, 0x35	; 53
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	85 bf       	out	0x35, r24	; 53
     6a4:	85 b7       	in	r24, 0x35	; 53
     6a6:	8d 7f       	andi	r24, 0xFD	; 253
     6a8:	85 bf       	out	0x35, r24	; 53
     6aa:	85 b7       	in	r24, 0x35	; 53
     6ac:	8b 7f       	andi	r24, 0xFB	; 251
     6ae:	85 bf       	out	0x35, r24	; 53
     6b0:	85 b7       	in	r24, 0x35	; 53
     6b2:	87 7f       	andi	r24, 0xF7	; 247
     6b4:	85 bf       	out	0x35, r24	; 53
     6b6:	84 b7       	in	r24, 0x34	; 52
     6b8:	8f 7b       	andi	r24, 0xBF	; 191
     6ba:	84 bf       	out	0x34, r24	; 52
     6bc:	8f b7       	in	r24, 0x3f	; 63
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	8f bf       	out	0x3f, r24	; 63
     6c2:	f9 01       	movw	r30, r18
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	e2 0f       	add	r30, r18
     6ca:	f3 1f       	adc	r31, r19
     6cc:	e6 58       	subi	r30, 0x86	; 134
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	80 81       	ld	r24, Z
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	c1 f0       	breq	.+48     	; 0x706 <EXINT_enuInit+0x88>
     6d6:	18 f0       	brcs	.+6      	; 0x6de <EXINT_enuInit+0x60>
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	71 f1       	breq	.+92     	; 0x738 <EXINT_enuInit+0xba>
     6dc:	48 c0       	rjmp	.+144    	; 0x76e <EXINT_enuInit+0xf0>
     6de:	8b b7       	in	r24, 0x3b	; 59
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	8b bf       	out	0x3b, r24	; 59
     6e4:	45 b7       	in	r20, 0x35	; 53
     6e6:	f9 01       	movw	r30, r18
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	2e 0f       	add	r18, r30
     6ee:	3f 1f       	adc	r19, r31
     6f0:	f9 01       	movw	r30, r18
     6f2:	e6 58       	subi	r30, 0x86	; 134
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	84 2b       	or	r24, r20
     6fa:	85 bf       	out	0x35, r24	; 53
     6fc:	8a b7       	in	r24, 0x3a	; 58
     6fe:	80 64       	ori	r24, 0x40	; 64
     700:	8a bf       	out	0x3a, r24	; 58
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	35 c0       	rjmp	.+106    	; 0x770 <EXINT_enuInit+0xf2>
     706:	8b b7       	in	r24, 0x3b	; 59
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	8b bf       	out	0x3b, r24	; 59
     70c:	45 b7       	in	r20, 0x35	; 53
     70e:	f9 01       	movw	r30, r18
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	e2 0f       	add	r30, r18
     716:	f3 1f       	adc	r31, r19
     718:	e6 58       	subi	r30, 0x86	; 134
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	82 81       	ldd	r24, Z+2	; 0x02
     71e:	28 2f       	mov	r18, r24
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	24 2b       	or	r18, r20
     72c:	25 bf       	out	0x35, r18	; 53
     72e:	8a b7       	in	r24, 0x3a	; 58
     730:	80 68       	ori	r24, 0x80	; 128
     732:	8a bf       	out	0x3a, r24	; 58
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	1c c0       	rjmp	.+56     	; 0x770 <EXINT_enuInit+0xf2>
     738:	8b b7       	in	r24, 0x3b	; 59
     73a:	80 62       	ori	r24, 0x20	; 32
     73c:	8b bf       	out	0x3b, r24	; 59
     73e:	f9 01       	movw	r30, r18
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	2e 0f       	add	r18, r30
     746:	3f 1f       	adc	r19, r31
     748:	f9 01       	movw	r30, r18
     74a:	e6 58       	subi	r30, 0x86	; 134
     74c:	ff 4f       	sbci	r31, 0xFF	; 255
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	19 f4       	brne	.+6      	; 0x75a <EXINT_enuInit+0xdc>
     754:	84 b7       	in	r24, 0x34	; 52
     756:	84 bf       	out	0x34, r24	; 52
     758:	05 c0       	rjmp	.+10     	; 0x764 <EXINT_enuInit+0xe6>
     75a:	83 30       	cpi	r24, 0x03	; 3
     75c:	19 f4       	brne	.+6      	; 0x764 <EXINT_enuInit+0xe6>
     75e:	84 b7       	in	r24, 0x34	; 52
     760:	80 64       	ori	r24, 0x40	; 64
     762:	84 bf       	out	0x34, r24	; 52
     764:	8a b7       	in	r24, 0x3a	; 58
     766:	80 62       	ori	r24, 0x20	; 32
     768:	8a bf       	out	0x3a, r24	; 58
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	01 c0       	rjmp	.+2      	; 0x770 <EXINT_enuInit+0xf2>
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	9f 5f       	subi	r25, 0xFF	; 255
     772:	99 23       	and	r25, r25
     774:	09 f4       	brne	.+2      	; 0x778 <EXINT_enuInit+0xfa>
     776:	86 cf       	rjmp	.-244    	; 0x684 <EXINT_enuInit+0x6>
     778:	08 95       	ret

0000077a <EXINT_enuCallBack>:

ErrorStates_t EXINT_enuCallBack(void (*Copy_pvoidfunCall)(void*), void *Copy_pvoidParameter, uint8 Copy_uint8IntID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pvoidfunCall != NULL){
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	21 f1       	breq	.+72     	; 0x7c6 <EXINT_enuCallBack+0x4c>
		switch(Copy_uint8IntID){
     77e:	41 30       	cpi	r20, 0x01	; 1
     780:	71 f0       	breq	.+28     	; 0x79e <EXINT_enuCallBack+0x24>
     782:	18 f0       	brcs	.+6      	; 0x78a <EXINT_enuCallBack+0x10>
     784:	42 30       	cpi	r20, 0x02	; 2
     786:	a9 f0       	breq	.+42     	; 0x7b2 <EXINT_enuCallBack+0x38>
     788:	20 c0       	rjmp	.+64     	; 0x7ca <EXINT_enuCallBack+0x50>
			case EXINT_INT0:
				EXINT_pvoidfuncCallBack[EXINT_INT0] = Copy_pvoidfunCall;
     78a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <EXINT_pvoidfuncCallBack+0x1>
     78e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <EXINT_pvoidfuncCallBack>
				EXINT_pvoidParameter[EXINT_INT0] = Copy_pvoidParameter;
     792:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <EXINT_pvoidParameter+0x1>
     796:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <EXINT_pvoidParameter>
				Local_enuErrorStates = ES_OK;
     79a:	80 e0       	ldi	r24, 0x00	; 0
				break;
     79c:	08 95       	ret
			case EXINT_INT1:
				EXINT_pvoidfuncCallBack[EXINT_INT1] = Copy_pvoidfunCall;
     79e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <counts.1707+0x1>
     7a2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <counts.1707>
				EXINT_pvoidParameter[EXINT_INT1] = Copy_pvoidParameter;
     7a6:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <EXINT_pvoidfuncCallBack+0x1>
     7aa:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <EXINT_pvoidfuncCallBack>
				Local_enuErrorStates = ES_OK;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
				break;
     7b0:	08 95       	ret
			case EXINT_INT2:
				EXINT_pvoidfuncCallBack[EXINT_INT2] = Copy_pvoidfunCall;
     7b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <counts.1707+0x3>
     7b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <counts.1707+0x2>
				EXINT_pvoidParameter[EXINT_INT2] = Copy_pvoidParameter;
     7ba:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <counts.1707+0x1>
     7be:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <counts.1707>
				Local_enuErrorStates = ES_OK;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
				break;
     7c4:	08 95       	ret
				Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
				break;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	08 95       	ret
				EXINT_pvoidfuncCallBack[EXINT_INT2] = Copy_pvoidfunCall;
				EXINT_pvoidParameter[EXINT_INT2] = Copy_pvoidParameter;
				Local_enuErrorStates = ES_OK;
				break;
			default:
				Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
     7ca:	87 e0       	ldi	r24, 0x07	; 7
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
	}
	return Local_enuErrorStates;
}
     7cc:	08 95       	ret

000007ce <__vector_1>:

ISR(EX_INT0_VECT){
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT0] != NULL){
     7f0:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <EXINT_pvoidfuncCallBack>
     7f4:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <EXINT_pvoidfuncCallBack+0x1>
     7f8:	30 97       	sbiw	r30, 0x00	; 0
     7fa:	29 f0       	breq	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		EXINT_pvoidfuncCallBack[EXINT_INT0](EXINT_pvoidParameter[EXINT_INT0]);
     7fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <EXINT_pvoidParameter>
     800:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <EXINT_pvoidParameter+0x1>
     804:	09 95       	icall
	}
}
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	0f 90       	pop	r0
     824:	1f 90       	pop	r1
     826:	18 95       	reti

00000828 <__vector_2>:

ISR(EX_INT1_VECT){
     828:	1f 92       	push	r1
     82a:	0f 92       	push	r0
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	0f 92       	push	r0
     830:	11 24       	eor	r1, r1
     832:	2f 93       	push	r18
     834:	3f 93       	push	r19
     836:	4f 93       	push	r20
     838:	5f 93       	push	r21
     83a:	6f 93       	push	r22
     83c:	7f 93       	push	r23
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	af 93       	push	r26
     844:	bf 93       	push	r27
     846:	ef 93       	push	r30
     848:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT1] != NULL){
     84a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <counts.1707>
     84e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <counts.1707+0x1>
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	29 f0       	breq	.+10     	; 0x860 <__stack+0x1>
		EXINT_pvoidfuncCallBack[EXINT_INT1](EXINT_pvoidParameter[EXINT_INT1]);
     856:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <EXINT_pvoidfuncCallBack>
     85a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <EXINT_pvoidfuncCallBack+0x1>
     85e:	09 95       	icall
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <__vector_3>:

ISR(EX_INT2_VECT){
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	4f 93       	push	r20
     892:	5f 93       	push	r21
     894:	6f 93       	push	r22
     896:	7f 93       	push	r23
     898:	8f 93       	push	r24
     89a:	9f 93       	push	r25
     89c:	af 93       	push	r26
     89e:	bf 93       	push	r27
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT2] != NULL){
     8a4:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <counts.1707+0x2>
     8a8:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <counts.1707+0x3>
     8ac:	30 97       	sbiw	r30, 0x00	; 0
     8ae:	29 f0       	breq	.+10     	; 0x8ba <__vector_3+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT2](EXINT_pvoidParameter[EXINT_INT2]);
     8b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <counts.1707>
     8b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <counts.1707+0x1>
     8b8:	09 95       	icall
	}
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	0f 90       	pop	r0
     8d8:	1f 90       	pop	r1
     8da:	18 95       	reti

000008dc <TIMER0_enuInit>:

	OCR0 = (uint8)(Copy_uint8DutyCycle * 255.0);

	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
	return Local_enuErrorStates;
}
     8dc:	83 b7       	in	r24, 0x33	; 51
     8de:	88 7f       	andi	r24, 0xF8	; 248
     8e0:	83 bf       	out	0x33, r24	; 51
     8e2:	83 b7       	in	r24, 0x33	; 51
     8e4:	83 60       	ori	r24, 0x03	; 3
     8e6:	83 bf       	out	0x33, r24	; 51
     8e8:	83 b7       	in	r24, 0x33	; 51
     8ea:	8f 7c       	andi	r24, 0xCF	; 207
     8ec:	83 bf       	out	0x33, r24	; 51
     8ee:	83 b7       	in	r24, 0x33	; 51
     8f0:	83 bf       	out	0x33, r24	; 51
     8f2:	89 b7       	in	r24, 0x39	; 57
     8f4:	8e 7f       	andi	r24, 0xFE	; 254
     8f6:	89 bf       	out	0x39, r24	; 57
     8f8:	89 b7       	in	r24, 0x39	; 57
     8fa:	8d 7f       	andi	r24, 0xFD	; 253
     8fc:	89 bf       	out	0x39, r24	; 57
     8fe:	83 b7       	in	r24, 0x33	; 51
     900:	8f 7b       	andi	r24, 0xBF	; 191
     902:	83 bf       	out	0x33, r24	; 51
     904:	83 b7       	in	r24, 0x33	; 51
     906:	87 7f       	andi	r24, 0xF7	; 247
     908:	83 bf       	out	0x33, r24	; 51
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret

0000090e <TIMER0_enuSetSyncDelay>:
     90e:	4f 92       	push	r4
     910:	5f 92       	push	r5
     912:	6f 92       	push	r6
     914:	7f 92       	push	r7
     916:	8f 92       	push	r8
     918:	9f 92       	push	r9
     91a:	af 92       	push	r10
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0e 94 41 07 	call	0xe82	; 0xe82 <__floatunsisf>
     92a:	2f e6       	ldi	r18, 0x6F	; 111
     92c:	32 e1       	ldi	r19, 0x12	; 18
     92e:	43 e8       	ldi	r20, 0x83	; 131
     930:	51 e4       	ldi	r21, 0x41	; 65
     932:	0e 94 a0 06 	call	0xd40	; 0xd40 <__divsf3>
     936:	2b 01       	movw	r4, r22
     938:	3c 01       	movw	r6, r24
     93a:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	c8 1a       	sub	r12, r24
     94a:	d8 0a       	sbc	r13, r24
     94c:	e8 0a       	sbc	r14, r24
     94e:	f8 0a       	sbc	r15, r24
     950:	c5 01       	movw	r24, r10
     952:	b4 01       	movw	r22, r8
     954:	0e 94 41 07 	call	0xe82	; 0xe82 <__floatunsisf>
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	c3 01       	movw	r24, r6
     95e:	b2 01       	movw	r22, r4
     960:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     964:	2b 01       	movw	r4, r22
     966:	3c 01       	movw	r6, r24
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	a9 01       	movw	r20, r18
     96e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__cmpsf2>
     972:	88 23       	and	r24, r24
     974:	f1 f1       	breq	.+124    	; 0x9f2 <TIMER0_enuSetSyncDelay+0xe4>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	53 e4       	ldi	r21, 0x43	; 67
     97e:	c3 01       	movw	r24, r6
     980:	b2 01       	movw	r22, r4
     982:	0e 94 f8 07 	call	0xff0	; 0xff0 <__mulsf3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	93 e4       	ldi	r25, 0x43	; 67
     992:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     996:	4b 01       	movw	r8, r22
     998:	5c 01       	movw	r10, r24
     99a:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     99e:	0e 94 41 07 	call	0xe82	; 0xe82 <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c5 01       	movw	r24, r10
     9a8:	b4 01       	movw	r22, r8
     9aa:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     9ae:	2b 01       	movw	r4, r22
     9b0:	3c 01       	movw	r6, r24
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	5f e3       	ldi	r21, 0x3F	; 63
     9ba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__gesf2>
     9be:	88 23       	and	r24, r24
     9c0:	94 f0       	brlt	.+36     	; 0x9e6 <TIMER0_enuSetSyncDelay+0xd8>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	c3 01       	movw	r24, r6
     9cc:	b2 01       	movw	r22, r4
     9ce:	0e 94 9b 06 	call	0xd36	; 0xd36 <__cmpsf2>
     9d2:	88 23       	and	r24, r24
     9d4:	44 f4       	brge	.+16     	; 0x9e6 <TIMER0_enuSetSyncDelay+0xd8>
     9d6:	c5 01       	movw	r24, r10
     9d8:	b4 01       	movw	r22, r8
     9da:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	86 0f       	add	r24, r22
     9e2:	82 bf       	out	0x32, r24	; 50
     9e4:	1b c0       	rjmp	.+54     	; 0xa1c <TIMER0_enuSetSyncDelay+0x10e>
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     9ee:	62 bf       	out	0x32, r22	; 50
     9f0:	15 c0       	rjmp	.+42     	; 0xa1c <TIMER0_enuSetSyncDelay+0x10e>
     9f2:	80 92 91 00 	sts	0x0091, r8	; 0x800091 <TIMER0_uint32NumOVF>
     9f6:	90 92 92 00 	sts	0x0092, r9	; 0x800092 <TIMER0_uint32NumOVF+0x1>
     9fa:	a0 92 93 00 	sts	0x0093, r10	; 0x800093 <TIMER0_uint32NumOVF+0x2>
     9fe:	b0 92 94 00 	sts	0x0094, r11	; 0x800094 <TIMER0_uint32NumOVF+0x3>
     a02:	12 be       	out	0x32, r1	; 50
     a04:	0b c0       	rjmp	.+22     	; 0xa1c <TIMER0_enuSetSyncDelay+0x10e>
     a06:	08 b6       	in	r0, 0x38	; 56
     a08:	00 fe       	sbrs	r0, 0
     a0a:	fd cf       	rjmp	.-6      	; 0xa06 <TIMER0_enuSetSyncDelay+0xf8>
     a0c:	88 b7       	in	r24, 0x38	; 56
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	88 bf       	out	0x38, r24	; 56
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	c8 1a       	sub	r12, r24
     a16:	d1 08       	sbc	r13, r1
     a18:	e1 08       	sbc	r14, r1
     a1a:	f1 08       	sbc	r15, r1
     a1c:	c1 14       	cp	r12, r1
     a1e:	d1 04       	cpc	r13, r1
     a20:	e1 04       	cpc	r14, r1
     a22:	f1 04       	cpc	r15, r1
     a24:	81 f7       	brne	.-32     	; 0xa06 <TIMER0_enuSetSyncDelay+0xf8>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	bf 90       	pop	r11
     a32:	af 90       	pop	r10
     a34:	9f 90       	pop	r9
     a36:	8f 90       	pop	r8
     a38:	7f 90       	pop	r7
     a3a:	6f 90       	pop	r6
     a3c:	5f 90       	pop	r5
     a3e:	4f 90       	pop	r4
     a40:	08 95       	ret

00000a42 <TIMER0_enuSetAsyncDelay>:
     a42:	4f 92       	push	r4
     a44:	5f 92       	push	r5
     a46:	6f 92       	push	r6
     a48:	7f 92       	push	r7
     a4a:	8f 92       	push	r8
     a4c:	9f 92       	push	r9
     a4e:	af 92       	push	r10
     a50:	bf 92       	push	r11
     a52:	cf 92       	push	r12
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ea 01       	movw	r28, r20
     a64:	89 01       	movw	r16, r18
     a66:	29 b7       	in	r18, 0x39	; 57
     a68:	21 60       	ori	r18, 0x01	; 1
     a6a:	29 bf       	out	0x39, r18	; 57
     a6c:	0e 94 41 07 	call	0xe82	; 0xe82 <__floatunsisf>
     a70:	2f e6       	ldi	r18, 0x6F	; 111
     a72:	32 e1       	ldi	r19, 0x12	; 18
     a74:	43 e8       	ldi	r20, 0x83	; 131
     a76:	51 e4       	ldi	r21, 0x41	; 65
     a78:	0e 94 a0 06 	call	0xd40	; 0xd40 <__divsf3>
     a7c:	4b 01       	movw	r8, r22
     a7e:	5c 01       	movw	r10, r24
     a80:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     a84:	6b 01       	movw	r12, r22
     a86:	7c 01       	movw	r14, r24
     a88:	2b 01       	movw	r4, r22
     a8a:	3c 01       	movw	r6, r24
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	48 1a       	sub	r4, r24
     a90:	58 0a       	sbc	r5, r24
     a92:	68 0a       	sbc	r6, r24
     a94:	78 0a       	sbc	r7, r24
     a96:	c7 01       	movw	r24, r14
     a98:	b6 01       	movw	r22, r12
     a9a:	0e 94 41 07 	call	0xe82	; 0xe82 <__floatunsisf>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     aaa:	4b 01       	movw	r8, r22
     aac:	5c 01       	movw	r10, r24
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	a9 01       	movw	r20, r18
     ab4:	0e 94 9b 06 	call	0xd36	; 0xd36 <__cmpsf2>
     ab8:	88 23       	and	r24, r24
     aba:	f1 f0       	breq	.+60     	; 0xaf8 <TIMER0_enuSetAsyncDelay+0xb6>
     abc:	40 92 91 00 	sts	0x0091, r4	; 0x800091 <TIMER0_uint32NumOVF>
     ac0:	50 92 92 00 	sts	0x0092, r5	; 0x800092 <TIMER0_uint32NumOVF+0x1>
     ac4:	60 92 93 00 	sts	0x0093, r6	; 0x800093 <TIMER0_uint32NumOVF+0x2>
     ac8:	70 92 94 00 	sts	0x0094, r7	; 0x800094 <TIMER0_uint32NumOVF+0x3>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	53 e4       	ldi	r21, 0x43	; 67
     ad4:	c5 01       	movw	r24, r10
     ad6:	b4 01       	movw	r22, r8
     ad8:	0e 94 f8 07 	call	0xff0	; 0xff0 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	80 e8       	ldi	r24, 0x80	; 128
     ae6:	93 e4       	ldi	r25, 0x43	; 67
     ae8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     aec:	0e 94 12 07 	call	0xe24	; 0xe24 <__fixunssfsi>
     af0:	62 bf       	out	0x32, r22	; 50
     af2:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <TIMER0_uint32Preload>
     af6:	0b c0       	rjmp	.+22     	; 0xb0e <TIMER0_enuSetAsyncDelay+0xcc>
     af8:	12 be       	out	0x32, r1	; 50
     afa:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <TIMER0_uint32Preload>
     afe:	c0 92 91 00 	sts	0x0091, r12	; 0x800091 <TIMER0_uint32NumOVF>
     b02:	d0 92 92 00 	sts	0x0092, r13	; 0x800092 <TIMER0_uint32NumOVF+0x1>
     b06:	e0 92 93 00 	sts	0x0093, r14	; 0x800093 <TIMER0_uint32NumOVF+0x2>
     b0a:	f0 92 94 00 	sts	0x0094, r15	; 0x800094 <TIMER0_uint32NumOVF+0x3>
     b0e:	20 97       	sbiw	r28, 0x00	; 0
     b10:	51 f0       	breq	.+20     	; 0xb26 <TIMER0_enuSetAsyncDelay+0xe4>
     b12:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <TIMER0_ApfuncCalledFuncs+0x1>
     b16:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <TIMER0_ApfuncCalledFuncs>
     b1a:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <TIMER0_ApvoidParameters+0x1>
     b1e:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <TIMER0_ApvoidParameters>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <TIMER0_enuSetAsyncDelay+0xe6>
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	6f 90       	pop	r6
     b44:	5f 90       	pop	r5
     b46:	4f 90       	pop	r4
     b48:	08 95       	ret

00000b4a <__vector_11>:

ISR(TIMER0_OVF_VECT){
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	ef 93       	push	r30
     b6a:	ff 93       	push	r31

	static uint32 counts = 0;
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] != NULL){
     b6c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <TIMER0_ApfuncCalledFuncs>
     b70:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <TIMER0_ApfuncCalledFuncs+0x1>
     b74:	89 2b       	or	r24, r25
     b76:	a1 f1       	breq	.+104    	; 0xbe0 <__vector_11+0x96>
		counts++;
     b78:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <counts.1707>
     b7c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <counts.1707+0x1>
     b80:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <counts.1707+0x2>
     b84:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <counts.1707+0x3>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	a1 1d       	adc	r26, r1
     b8c:	b1 1d       	adc	r27, r1
     b8e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <counts.1707>
     b92:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <counts.1707+0x1>
     b96:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <counts.1707+0x2>
     b9a:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <counts.1707+0x3>
		if(counts == TIMER0_uint32NumOVF){
     b9e:	40 91 91 00 	lds	r20, 0x0091	; 0x800091 <TIMER0_uint32NumOVF>
     ba2:	50 91 92 00 	lds	r21, 0x0092	; 0x800092 <TIMER0_uint32NumOVF+0x1>
     ba6:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <TIMER0_uint32NumOVF+0x2>
     baa:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <TIMER0_uint32NumOVF+0x3>
     bae:	84 17       	cp	r24, r20
     bb0:	95 07       	cpc	r25, r21
     bb2:	a6 07       	cpc	r26, r22
     bb4:	b7 07       	cpc	r27, r23
     bb6:	a1 f4       	brne	.+40     	; 0xbe0 <__vector_11+0x96>
			counts = 0;
     bb8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <counts.1707>
     bbc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <counts.1707+0x1>
     bc0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <counts.1707+0x2>
     bc4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <counts.1707+0x3>
			TCNT0 = TIMER0_uint32Preload;
     bc8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <TIMER0_uint32Preload>
     bcc:	82 bf       	out	0x32, r24	; 50
			TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF](TIMER0_ApvoidParameters[TIMER0_INT_OVF]);
     bce:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <TIMER0_ApfuncCalledFuncs>
     bd2:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <TIMER0_ApfuncCalledFuncs+0x1>
     bd6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <TIMER0_ApvoidParameters>
     bda:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <TIMER0_ApvoidParameters+0x1>
     bde:	09 95       	icall
		}
	}
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_10>:

ISR(TIMER0_COMP_VECT){
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP] != NULL){
     c24:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <TIMER0_ApfuncCalledFuncs+0x2>
     c28:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <TIMER0_ApfuncCalledFuncs+0x3>
     c2c:	30 97       	sbiw	r30, 0x00	; 0
     c2e:	29 f0       	breq	.+10     	; 0xc3a <__vector_10+0x38>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP](TIMER0_ApvoidParameters[TIMER0_INT_COMP]);
     c30:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <TIMER0_ApvoidParameters+0x2>
     c34:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <TIMER0_ApvoidParameters+0x3>
     c38:	09 95       	icall
	}
}
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__subsf3>:
     c5c:	50 58       	subi	r21, 0x80	; 128

00000c5e <__addsf3>:
     c5e:	bb 27       	eor	r27, r27
     c60:	aa 27       	eor	r26, r26
     c62:	0e 94 46 06 	call	0xc8c	; 0xc8c <__addsf3x>
     c66:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_round>
     c6a:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscA>
     c6e:	38 f0       	brcs	.+14     	; 0xc7e <__addsf3+0x20>
     c70:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscB>
     c74:	20 f0       	brcs	.+8      	; 0xc7e <__addsf3+0x20>
     c76:	39 f4       	brne	.+14     	; 0xc86 <__addsf3+0x28>
     c78:	9f 3f       	cpi	r25, 0xFF	; 255
     c7a:	19 f4       	brne	.+6      	; 0xc82 <__addsf3+0x24>
     c7c:	26 f4       	brtc	.+8      	; 0xc86 <__addsf3+0x28>
     c7e:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_nan>
     c82:	0e f4       	brtc	.+2      	; 0xc86 <__addsf3+0x28>
     c84:	e0 95       	com	r30
     c86:	e7 fb       	bst	r30, 7
     c88:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>

00000c8c <__addsf3x>:
     c8c:	e9 2f       	mov	r30, r25
     c8e:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_split3>
     c92:	58 f3       	brcs	.-42     	; 0xc6a <__addsf3+0xc>
     c94:	ba 17       	cp	r27, r26
     c96:	62 07       	cpc	r22, r18
     c98:	73 07       	cpc	r23, r19
     c9a:	84 07       	cpc	r24, r20
     c9c:	95 07       	cpc	r25, r21
     c9e:	20 f0       	brcs	.+8      	; 0xca8 <__addsf3x+0x1c>
     ca0:	79 f4       	brne	.+30     	; 0xcc0 <__addsf3x+0x34>
     ca2:	a6 f5       	brtc	.+104    	; 0xd0c <__addsf3x+0x80>
     ca4:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
     ca8:	0e f4       	brtc	.+2      	; 0xcac <__addsf3x+0x20>
     caa:	e0 95       	com	r30
     cac:	0b 2e       	mov	r0, r27
     cae:	ba 2f       	mov	r27, r26
     cb0:	a0 2d       	mov	r26, r0
     cb2:	0b 01       	movw	r0, r22
     cb4:	b9 01       	movw	r22, r18
     cb6:	90 01       	movw	r18, r0
     cb8:	0c 01       	movw	r0, r24
     cba:	ca 01       	movw	r24, r20
     cbc:	a0 01       	movw	r20, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	ff 27       	eor	r31, r31
     cc2:	59 1b       	sub	r21, r25
     cc4:	99 f0       	breq	.+38     	; 0xcec <__addsf3x+0x60>
     cc6:	59 3f       	cpi	r21, 0xF9	; 249
     cc8:	50 f4       	brcc	.+20     	; 0xcde <__addsf3x+0x52>
     cca:	50 3e       	cpi	r21, 0xE0	; 224
     ccc:	68 f1       	brcs	.+90     	; 0xd28 <__addsf3x+0x9c>
     cce:	1a 16       	cp	r1, r26
     cd0:	f0 40       	sbci	r31, 0x00	; 0
     cd2:	a2 2f       	mov	r26, r18
     cd4:	23 2f       	mov	r18, r19
     cd6:	34 2f       	mov	r19, r20
     cd8:	44 27       	eor	r20, r20
     cda:	58 5f       	subi	r21, 0xF8	; 248
     cdc:	f3 cf       	rjmp	.-26     	; 0xcc4 <__addsf3x+0x38>
     cde:	46 95       	lsr	r20
     ce0:	37 95       	ror	r19
     ce2:	27 95       	ror	r18
     ce4:	a7 95       	ror	r26
     ce6:	f0 40       	sbci	r31, 0x00	; 0
     ce8:	53 95       	inc	r21
     cea:	c9 f7       	brne	.-14     	; 0xcde <__addsf3x+0x52>
     cec:	7e f4       	brtc	.+30     	; 0xd0c <__addsf3x+0x80>
     cee:	1f 16       	cp	r1, r31
     cf0:	ba 0b       	sbc	r27, r26
     cf2:	62 0b       	sbc	r22, r18
     cf4:	73 0b       	sbc	r23, r19
     cf6:	84 0b       	sbc	r24, r20
     cf8:	ba f0       	brmi	.+46     	; 0xd28 <__addsf3x+0x9c>
     cfa:	91 50       	subi	r25, 0x01	; 1
     cfc:	a1 f0       	breq	.+40     	; 0xd26 <__addsf3x+0x9a>
     cfe:	ff 0f       	add	r31, r31
     d00:	bb 1f       	adc	r27, r27
     d02:	66 1f       	adc	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	88 1f       	adc	r24, r24
     d08:	c2 f7       	brpl	.-16     	; 0xcfa <__addsf3x+0x6e>
     d0a:	0e c0       	rjmp	.+28     	; 0xd28 <__addsf3x+0x9c>
     d0c:	ba 0f       	add	r27, r26
     d0e:	62 1f       	adc	r22, r18
     d10:	73 1f       	adc	r23, r19
     d12:	84 1f       	adc	r24, r20
     d14:	48 f4       	brcc	.+18     	; 0xd28 <__addsf3x+0x9c>
     d16:	87 95       	ror	r24
     d18:	77 95       	ror	r23
     d1a:	67 95       	ror	r22
     d1c:	b7 95       	ror	r27
     d1e:	f7 95       	ror	r31
     d20:	9e 3f       	cpi	r25, 0xFE	; 254
     d22:	08 f0       	brcs	.+2      	; 0xd26 <__addsf3x+0x9a>
     d24:	b0 cf       	rjmp	.-160    	; 0xc86 <__addsf3+0x28>
     d26:	93 95       	inc	r25
     d28:	88 0f       	add	r24, r24
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <__addsf3x+0xa2>
     d2c:	99 27       	eor	r25, r25
     d2e:	ee 0f       	add	r30, r30
     d30:	97 95       	ror	r25
     d32:	87 95       	ror	r24
     d34:	08 95       	ret

00000d36 <__cmpsf2>:
     d36:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_cmp>
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <__cmpsf2+0x8>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	08 95       	ret

00000d40 <__divsf3>:
     d40:	0e 94 b4 06 	call	0xd68	; 0xd68 <__divsf3x>
     d44:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_round>
     d48:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscB>
     d4c:	58 f0       	brcs	.+22     	; 0xd64 <__divsf3+0x24>
     d4e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscA>
     d52:	40 f0       	brcs	.+16     	; 0xd64 <__divsf3+0x24>
     d54:	29 f4       	brne	.+10     	; 0xd60 <__divsf3+0x20>
     d56:	5f 3f       	cpi	r21, 0xFF	; 255
     d58:	29 f0       	breq	.+10     	; 0xd64 <__divsf3+0x24>
     d5a:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
     d5e:	51 11       	cpse	r21, r1
     d60:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     d64:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_nan>

00000d68 <__divsf3x>:
     d68:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_split3>
     d6c:	68 f3       	brcs	.-38     	; 0xd48 <__divsf3+0x8>

00000d6e <__divsf3_pse>:
     d6e:	99 23       	and	r25, r25
     d70:	b1 f3       	breq	.-20     	; 0xd5e <__divsf3+0x1e>
     d72:	55 23       	and	r21, r21
     d74:	91 f3       	breq	.-28     	; 0xd5a <__divsf3+0x1a>
     d76:	95 1b       	sub	r25, r21
     d78:	55 0b       	sbc	r21, r21
     d7a:	bb 27       	eor	r27, r27
     d7c:	aa 27       	eor	r26, r26
     d7e:	62 17       	cp	r22, r18
     d80:	73 07       	cpc	r23, r19
     d82:	84 07       	cpc	r24, r20
     d84:	38 f0       	brcs	.+14     	; 0xd94 <__divsf3_pse+0x26>
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	44 1f       	adc	r20, r20
     d90:	aa 1f       	adc	r26, r26
     d92:	a9 f3       	breq	.-22     	; 0xd7e <__divsf3_pse+0x10>
     d94:	35 d0       	rcall	.+106    	; 0xe00 <__divsf3_pse+0x92>
     d96:	0e 2e       	mov	r0, r30
     d98:	3a f0       	brmi	.+14     	; 0xda8 <__divsf3_pse+0x3a>
     d9a:	e0 e8       	ldi	r30, 0x80	; 128
     d9c:	32 d0       	rcall	.+100    	; 0xe02 <__divsf3_pse+0x94>
     d9e:	91 50       	subi	r25, 0x01	; 1
     da0:	50 40       	sbci	r21, 0x00	; 0
     da2:	e6 95       	lsr	r30
     da4:	00 1c       	adc	r0, r0
     da6:	ca f7       	brpl	.-14     	; 0xd9a <__divsf3_pse+0x2c>
     da8:	2b d0       	rcall	.+86     	; 0xe00 <__divsf3_pse+0x92>
     daa:	fe 2f       	mov	r31, r30
     dac:	29 d0       	rcall	.+82     	; 0xe00 <__divsf3_pse+0x92>
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	bb 1f       	adc	r27, r27
     db6:	26 17       	cp	r18, r22
     db8:	37 07       	cpc	r19, r23
     dba:	48 07       	cpc	r20, r24
     dbc:	ab 07       	cpc	r26, r27
     dbe:	b0 e8       	ldi	r27, 0x80	; 128
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__divsf3_pse+0x56>
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	80 2d       	mov	r24, r0
     dc6:	bf 01       	movw	r22, r30
     dc8:	ff 27       	eor	r31, r31
     dca:	93 58       	subi	r25, 0x83	; 131
     dcc:	5f 4f       	sbci	r21, 0xFF	; 255
     dce:	3a f0       	brmi	.+14     	; 0xdde <__divsf3_pse+0x70>
     dd0:	9e 3f       	cpi	r25, 0xFE	; 254
     dd2:	51 05       	cpc	r21, r1
     dd4:	78 f0       	brcs	.+30     	; 0xdf4 <__divsf3_pse+0x86>
     dd6:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
     dda:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	e4 f3       	brlt	.-8      	; 0xdda <__divsf3_pse+0x6c>
     de2:	98 3e       	cpi	r25, 0xE8	; 232
     de4:	d4 f3       	brlt	.-12     	; 0xdda <__divsf3_pse+0x6c>
     de6:	86 95       	lsr	r24
     de8:	77 95       	ror	r23
     dea:	67 95       	ror	r22
     dec:	b7 95       	ror	r27
     dee:	f7 95       	ror	r31
     df0:	9f 5f       	subi	r25, 0xFF	; 255
     df2:	c9 f7       	brne	.-14     	; 0xde6 <__divsf3_pse+0x78>
     df4:	88 0f       	add	r24, r24
     df6:	91 1d       	adc	r25, r1
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	97 f9       	bld	r25, 7
     dfe:	08 95       	ret
     e00:	e1 e0       	ldi	r30, 0x01	; 1
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	bb 1f       	adc	r27, r27
     e0a:	62 17       	cp	r22, r18
     e0c:	73 07       	cpc	r23, r19
     e0e:	84 07       	cpc	r24, r20
     e10:	ba 07       	cpc	r27, r26
     e12:	20 f0       	brcs	.+8      	; 0xe1c <__divsf3_pse+0xae>
     e14:	62 1b       	sub	r22, r18
     e16:	73 0b       	sbc	r23, r19
     e18:	84 0b       	sbc	r24, r20
     e1a:	ba 0b       	sbc	r27, r26
     e1c:	ee 1f       	adc	r30, r30
     e1e:	88 f7       	brcc	.-30     	; 0xe02 <__divsf3_pse+0x94>
     e20:	e0 95       	com	r30
     e22:	08 95       	ret

00000e24 <__fixunssfsi>:
     e24:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_splitA>
     e28:	88 f0       	brcs	.+34     	; 0xe4c <__fixunssfsi+0x28>
     e2a:	9f 57       	subi	r25, 0x7F	; 127
     e2c:	98 f0       	brcs	.+38     	; 0xe54 <__fixunssfsi+0x30>
     e2e:	b9 2f       	mov	r27, r25
     e30:	99 27       	eor	r25, r25
     e32:	b7 51       	subi	r27, 0x17	; 23
     e34:	b0 f0       	brcs	.+44     	; 0xe62 <__fixunssfsi+0x3e>
     e36:	e1 f0       	breq	.+56     	; 0xe70 <__fixunssfsi+0x4c>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	1a f0       	brmi	.+6      	; 0xe48 <__fixunssfsi+0x24>
     e42:	ba 95       	dec	r27
     e44:	c9 f7       	brne	.-14     	; 0xe38 <__fixunssfsi+0x14>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <__fixunssfsi+0x4c>
     e48:	b1 30       	cpi	r27, 0x01	; 1
     e4a:	91 f0       	breq	.+36     	; 0xe70 <__fixunssfsi+0x4c>
     e4c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fp_zero>
     e50:	b1 e0       	ldi	r27, 0x01	; 1
     e52:	08 95       	ret
     e54:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
     e58:	67 2f       	mov	r22, r23
     e5a:	78 2f       	mov	r23, r24
     e5c:	88 27       	eor	r24, r24
     e5e:	b8 5f       	subi	r27, 0xF8	; 248
     e60:	39 f0       	breq	.+14     	; 0xe70 <__fixunssfsi+0x4c>
     e62:	b9 3f       	cpi	r27, 0xF9	; 249
     e64:	cc f3       	brlt	.-14     	; 0xe58 <__fixunssfsi+0x34>
     e66:	86 95       	lsr	r24
     e68:	77 95       	ror	r23
     e6a:	67 95       	ror	r22
     e6c:	b3 95       	inc	r27
     e6e:	d9 f7       	brne	.-10     	; 0xe66 <__fixunssfsi+0x42>
     e70:	3e f4       	brtc	.+14     	; 0xe80 <__fixunssfsi+0x5c>
     e72:	90 95       	com	r25
     e74:	80 95       	com	r24
     e76:	70 95       	com	r23
     e78:	61 95       	neg	r22
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	08 95       	ret

00000e82 <__floatunsisf>:
     e82:	e8 94       	clt
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <__floatsisf+0x12>

00000e86 <__floatsisf>:
     e86:	97 fb       	bst	r25, 7
     e88:	3e f4       	brtc	.+14     	; 0xe98 <__floatsisf+0x12>
     e8a:	90 95       	com	r25
     e8c:	80 95       	com	r24
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	99 23       	and	r25, r25
     e9a:	a9 f0       	breq	.+42     	; 0xec6 <__floatsisf+0x40>
     e9c:	f9 2f       	mov	r31, r25
     e9e:	96 e9       	ldi	r25, 0x96	; 150
     ea0:	bb 27       	eor	r27, r27
     ea2:	93 95       	inc	r25
     ea4:	f6 95       	lsr	r31
     ea6:	87 95       	ror	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f1 11       	cpse	r31, r1
     eb0:	f8 cf       	rjmp	.-16     	; 0xea2 <__floatsisf+0x1c>
     eb2:	fa f4       	brpl	.+62     	; 0xef2 <__floatsisf+0x6c>
     eb4:	bb 0f       	add	r27, r27
     eb6:	11 f4       	brne	.+4      	; 0xebc <__floatsisf+0x36>
     eb8:	60 ff       	sbrs	r22, 0
     eba:	1b c0       	rjmp	.+54     	; 0xef2 <__floatsisf+0x6c>
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <__floatsisf+0x6c>
     ec6:	88 23       	and	r24, r24
     ec8:	11 f0       	breq	.+4      	; 0xece <__floatsisf+0x48>
     eca:	96 e9       	ldi	r25, 0x96	; 150
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <__floatsisf+0x6a>
     ece:	77 23       	and	r23, r23
     ed0:	21 f0       	breq	.+8      	; 0xeda <__floatsisf+0x54>
     ed2:	9e e8       	ldi	r25, 0x8E	; 142
     ed4:	87 2f       	mov	r24, r23
     ed6:	76 2f       	mov	r23, r22
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__floatsisf+0x5e>
     eda:	66 23       	and	r22, r22
     edc:	71 f0       	breq	.+28     	; 0xefa <__floatsisf+0x74>
     ede:	96 e8       	ldi	r25, 0x86	; 134
     ee0:	86 2f       	mov	r24, r22
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	2a f0       	brmi	.+10     	; 0xef2 <__floatsisf+0x6c>
     ee8:	9a 95       	dec	r25
     eea:	66 0f       	add	r22, r22
     eec:	77 1f       	adc	r23, r23
     eee:	88 1f       	adc	r24, r24
     ef0:	da f7       	brpl	.-10     	; 0xee8 <__floatsisf+0x62>
     ef2:	88 0f       	add	r24, r24
     ef4:	96 95       	lsr	r25
     ef6:	87 95       	ror	r24
     ef8:	97 f9       	bld	r25, 7
     efa:	08 95       	ret

00000efc <__fp_cmp>:
     efc:	99 0f       	add	r25, r25
     efe:	00 08       	sbc	r0, r0
     f00:	55 0f       	add	r21, r21
     f02:	aa 0b       	sbc	r26, r26
     f04:	e0 e8       	ldi	r30, 0x80	; 128
     f06:	fe ef       	ldi	r31, 0xFE	; 254
     f08:	16 16       	cp	r1, r22
     f0a:	17 06       	cpc	r1, r23
     f0c:	e8 07       	cpc	r30, r24
     f0e:	f9 07       	cpc	r31, r25
     f10:	c0 f0       	brcs	.+48     	; 0xf42 <__fp_cmp+0x46>
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	e4 07       	cpc	r30, r20
     f18:	f5 07       	cpc	r31, r21
     f1a:	98 f0       	brcs	.+38     	; 0xf42 <__fp_cmp+0x46>
     f1c:	62 1b       	sub	r22, r18
     f1e:	73 0b       	sbc	r23, r19
     f20:	84 0b       	sbc	r24, r20
     f22:	95 0b       	sbc	r25, r21
     f24:	39 f4       	brne	.+14     	; 0xf34 <__fp_cmp+0x38>
     f26:	0a 26       	eor	r0, r26
     f28:	61 f0       	breq	.+24     	; 0xf42 <__fp_cmp+0x46>
     f2a:	23 2b       	or	r18, r19
     f2c:	24 2b       	or	r18, r20
     f2e:	25 2b       	or	r18, r21
     f30:	21 f4       	brne	.+8      	; 0xf3a <__fp_cmp+0x3e>
     f32:	08 95       	ret
     f34:	0a 26       	eor	r0, r26
     f36:	09 f4       	brne	.+2      	; 0xf3a <__fp_cmp+0x3e>
     f38:	a1 40       	sbci	r26, 0x01	; 1
     f3a:	a6 95       	lsr	r26
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	81 1d       	adc	r24, r1
     f40:	81 1d       	adc	r24, r1
     f42:	08 95       	ret

00000f44 <__fp_inf>:
     f44:	97 f9       	bld	r25, 7
     f46:	9f 67       	ori	r25, 0x7F	; 127
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	08 95       	ret

00000f50 <__fp_nan>:
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	80 ec       	ldi	r24, 0xC0	; 192
     f54:	08 95       	ret

00000f56 <__fp_pscA>:
     f56:	00 24       	eor	r0, r0
     f58:	0a 94       	dec	r0
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	18 06       	cpc	r1, r24
     f60:	09 06       	cpc	r0, r25
     f62:	08 95       	ret

00000f64 <__fp_pscB>:
     f64:	00 24       	eor	r0, r0
     f66:	0a 94       	dec	r0
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	05 06       	cpc	r0, r21
     f70:	08 95       	ret

00000f72 <__fp_round>:
     f72:	09 2e       	mov	r0, r25
     f74:	03 94       	inc	r0
     f76:	00 0c       	add	r0, r0
     f78:	11 f4       	brne	.+4      	; 0xf7e <__fp_round+0xc>
     f7a:	88 23       	and	r24, r24
     f7c:	52 f0       	brmi	.+20     	; 0xf92 <__fp_round+0x20>
     f7e:	bb 0f       	add	r27, r27
     f80:	40 f4       	brcc	.+16     	; 0xf92 <__fp_round+0x20>
     f82:	bf 2b       	or	r27, r31
     f84:	11 f4       	brne	.+4      	; 0xf8a <__fp_round+0x18>
     f86:	60 ff       	sbrs	r22, 0
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <__fp_round+0x20>
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	08 95       	ret

00000f94 <__fp_split3>:
     f94:	57 fd       	sbrc	r21, 7
     f96:	90 58       	subi	r25, 0x80	; 128
     f98:	44 0f       	add	r20, r20
     f9a:	55 1f       	adc	r21, r21
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <__fp_splitA+0x10>
     f9e:	5f 3f       	cpi	r21, 0xFF	; 255
     fa0:	71 f0       	breq	.+28     	; 0xfbe <__fp_splitA+0x1a>
     fa2:	47 95       	ror	r20

00000fa4 <__fp_splitA>:
     fa4:	88 0f       	add	r24, r24
     fa6:	97 fb       	bst	r25, 7
     fa8:	99 1f       	adc	r25, r25
     faa:	61 f0       	breq	.+24     	; 0xfc4 <__fp_splitA+0x20>
     fac:	9f 3f       	cpi	r25, 0xFF	; 255
     fae:	79 f0       	breq	.+30     	; 0xfce <__fp_splitA+0x2a>
     fb0:	87 95       	ror	r24
     fb2:	08 95       	ret
     fb4:	12 16       	cp	r1, r18
     fb6:	13 06       	cpc	r1, r19
     fb8:	14 06       	cpc	r1, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <__fp_split3+0xe>
     fbe:	46 95       	lsr	r20
     fc0:	f1 df       	rcall	.-30     	; 0xfa4 <__fp_splitA>
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <__fp_splitA+0x30>
     fc4:	16 16       	cp	r1, r22
     fc6:	17 06       	cpc	r1, r23
     fc8:	18 06       	cpc	r1, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	f1 cf       	rjmp	.-30     	; 0xfb0 <__fp_splitA+0xc>
     fce:	86 95       	lsr	r24
     fd0:	71 05       	cpc	r23, r1
     fd2:	61 05       	cpc	r22, r1
     fd4:	08 94       	sec
     fd6:	08 95       	ret

00000fd8 <__fp_zero>:
     fd8:	e8 94       	clt

00000fda <__fp_szero>:
     fda:	bb 27       	eor	r27, r27
     fdc:	66 27       	eor	r22, r22
     fde:	77 27       	eor	r23, r23
     fe0:	cb 01       	movw	r24, r22
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__gesf2>:
     fe6:	0e 94 7e 07 	call	0xefc	; 0xefc <__fp_cmp>
     fea:	08 f4       	brcc	.+2      	; 0xfee <__gesf2+0x8>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__mulsf3>:
     ff0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3x>
     ff4:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_round>
     ff8:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscA>
     ffc:	38 f0       	brcs	.+14     	; 0x100c <__mulsf3+0x1c>
     ffe:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscB>
    1002:	20 f0       	brcs	.+8      	; 0x100c <__mulsf3+0x1c>
    1004:	95 23       	and	r25, r21
    1006:	11 f0       	breq	.+4      	; 0x100c <__mulsf3+0x1c>
    1008:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
    100c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_nan>
    1010:	11 24       	eor	r1, r1
    1012:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>

00001016 <__mulsf3x>:
    1016:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_split3>
    101a:	70 f3       	brcs	.-36     	; 0xff8 <__mulsf3+0x8>

0000101c <__mulsf3_pse>:
    101c:	95 9f       	mul	r25, r21
    101e:	c1 f3       	breq	.-16     	; 0x1010 <__mulsf3+0x20>
    1020:	95 0f       	add	r25, r21
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	55 1f       	adc	r21, r21
    1026:	62 9f       	mul	r22, r18
    1028:	f0 01       	movw	r30, r0
    102a:	72 9f       	mul	r23, r18
    102c:	bb 27       	eor	r27, r27
    102e:	f0 0d       	add	r31, r0
    1030:	b1 1d       	adc	r27, r1
    1032:	63 9f       	mul	r22, r19
    1034:	aa 27       	eor	r26, r26
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	aa 1f       	adc	r26, r26
    103c:	64 9f       	mul	r22, r20
    103e:	66 27       	eor	r22, r22
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	66 1f       	adc	r22, r22
    1046:	82 9f       	mul	r24, r18
    1048:	22 27       	eor	r18, r18
    104a:	b0 0d       	add	r27, r0
    104c:	a1 1d       	adc	r26, r1
    104e:	62 1f       	adc	r22, r18
    1050:	73 9f       	mul	r23, r19
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	83 9f       	mul	r24, r19
    105a:	a0 0d       	add	r26, r0
    105c:	61 1d       	adc	r22, r1
    105e:	22 1f       	adc	r18, r18
    1060:	74 9f       	mul	r23, r20
    1062:	33 27       	eor	r19, r19
    1064:	a0 0d       	add	r26, r0
    1066:	61 1d       	adc	r22, r1
    1068:	23 1f       	adc	r18, r19
    106a:	84 9f       	mul	r24, r20
    106c:	60 0d       	add	r22, r0
    106e:	21 1d       	adc	r18, r1
    1070:	82 2f       	mov	r24, r18
    1072:	76 2f       	mov	r23, r22
    1074:	6a 2f       	mov	r22, r26
    1076:	11 24       	eor	r1, r1
    1078:	9f 57       	subi	r25, 0x7F	; 127
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	9a f0       	brmi	.+38     	; 0x10a4 <__mulsf3_pse+0x88>
    107e:	f1 f0       	breq	.+60     	; 0x10bc <__mulsf3_pse+0xa0>
    1080:	88 23       	and	r24, r24
    1082:	4a f0       	brmi	.+18     	; 0x1096 <__mulsf3_pse+0x7a>
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	bb 1f       	adc	r27, r27
    108a:	66 1f       	adc	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	a9 f7       	brne	.-22     	; 0x1080 <__mulsf3_pse+0x64>
    1096:	9e 3f       	cpi	r25, 0xFE	; 254
    1098:	51 05       	cpc	r21, r1
    109a:	80 f0       	brcs	.+32     	; 0x10bc <__mulsf3_pse+0xa0>
    109c:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
    10a0:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	e4 f3       	brlt	.-8      	; 0x10a0 <__mulsf3_pse+0x84>
    10a8:	98 3e       	cpi	r25, 0xE8	; 232
    10aa:	d4 f3       	brlt	.-12     	; 0x10a0 <__mulsf3_pse+0x84>
    10ac:	86 95       	lsr	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	b7 95       	ror	r27
    10b4:	f7 95       	ror	r31
    10b6:	e7 95       	ror	r30
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	c1 f7       	brne	.-16     	; 0x10ac <__mulsf3_pse+0x90>
    10bc:	fe 2b       	or	r31, r30
    10be:	88 0f       	add	r24, r24
    10c0:	91 1d       	adc	r25, r1
    10c2:	96 95       	lsr	r25
    10c4:	87 95       	ror	r24
    10c6:	97 f9       	bld	r25, 7
    10c8:	08 95       	ret

000010ca <_exit>:
    10ca:	f8 94       	cli

000010cc <__stop_program>:
    10cc:	ff cf       	rjmp	.-2      	; 0x10cc <__stop_program>
