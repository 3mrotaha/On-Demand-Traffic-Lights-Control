
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800064  00800064  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140a  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e92  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099f  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017cd  00000000  00000000  000042eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
   8:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_2>
   c:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_10>
  2c:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 3e 03 	jmp	0x67c	; 0x67c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <togglePin>:
#include "LIB/std_types.h"
#include "LIB/ErrorStates.h"
#include "MCAL/EX_Interrupt/EXINT_int.h"
#include "MCAL/DIO/DIO_int.h"
void togglePin(void){
	DIO_enuTogPinValue(DIO_uint8_PORTA, DIO_uint8_PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 44 01 	call	0x288	; 0x288 <DIO_enuTogPinValue>
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
	// initialize the interrupt driver
	EXINT_enuInit();
  9c:	0e 94 86 01 	call	0x30c	; 0x30c <EXINT_enuInit>
	
	// call back a function
	EXINT_enuCallBack(&togglePin, NULL, EXINTuint8_INT0);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	89 e4       	ldi	r24, 0x49	; 73
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 04 02 	call	0x408	; 0x408 <EXINT_enuCallBack>
	
	// initailize the pin
	DIO_enuSetPinDir(DIO_uint8_PORTA, DIO_uint8_PIN0, OUTPUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_enuSetPinDir>
	DIO_enuSetPinValue(DIO_uint8_PORTA, DIO_uint8_PIN0, HIGH);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_enuSetPinValue>
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x26>

000000c4 <DIO_enuSetPinDir>:
}

ErrorStates_t DIO_enuSetPinDir(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	08 f0       	brcs	.+2      	; 0xca <DIO_enuSetPinDir+0x6>
  c8:	68 c0       	rjmp	.+208    	; 0x19a <DIO_enuSetPinDir+0xd6>
		if(Copy_uint8PinID <= DIO_PIN7){
  ca:	68 30       	cpi	r22, 0x08	; 8
  cc:	08 f0       	brcs	.+2      	; 0xd0 <DIO_enuSetPinDir+0xc>
  ce:	67 c0       	rjmp	.+206    	; 0x19e <DIO_enuSetPinDir+0xda>
			switch(Copy_uint8PortID){
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	f1 f0       	breq	.+60     	; 0x110 <DIO_enuSetPinDir+0x4c>
  d4:	30 f0       	brcs	.+12     	; 0xe2 <DIO_enuSetPinDir+0x1e>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 f1       	breq	.+100    	; 0x13e <DIO_enuSetPinDir+0x7a>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	09 f4       	brne	.+2      	; 0xe0 <DIO_enuSetPinDir+0x1c>
  de:	46 c0       	rjmp	.+140    	; 0x16c <DIO_enuSetPinDir+0xa8>
  e0:	60 c0       	rjmp	.+192    	; 0x1a2 <DIO_enuSetPinDir+0xde>
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
  e2:	2a b3       	in	r18, 0x1a	; 26
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	06 2e       	mov	r0, r22
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_enuSetPinDir+0x2c>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_enuSetPinDir+0x28>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
  fa:	8a b3       	in	r24, 0x1a	; 26
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_enuSetPinDir+0x40>
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_enuSetPinDir+0x3c>
 108:	48 2b       	or	r20, r24
 10a:	4a bb       	out	0x1a, r20	; 26
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					DDRA &= ~(BIT_MASK << Copy_uint8PinID);
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 10e:	08 95       	ret
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	06 2e       	mov	r0, r22
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_enuSetPinDir+0x5a>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_enuSetPinDir+0x56>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_enuSetPinDir+0x6e>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_enuSetPinDir+0x6a>
 136:	48 2b       	or	r20, r24
 138:	47 bb       	out	0x17, r20	; 23
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 13a:	80 e0       	ldi	r24, 0x00	; 0
					DDRA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					DDRB &= ~(BIT_MASK << Copy_uint8PinID);
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 13c:	08 95       	ret
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	06 2e       	mov	r0, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enuSetPinDir+0x88>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enuSetPinDir+0x84>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
 156:	84 b3       	in	r24, 0x14	; 20
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_enuSetPinDir+0x9c>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_enuSetPinDir+0x98>
 164:	48 2b       	or	r20, r24
 166:	44 bb       	out	0x14, r20	; 20
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 168:	80 e0       	ldi	r24, 0x00	; 0
					DDRB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					DDRC &= ~(BIT_MASK << Copy_uint8PinID);
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 16a:	08 95       	ret
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
 16c:	21 b3       	in	r18, 0x11	; 17
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	06 2e       	mov	r0, r22
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_enuSetPinDir+0xb6>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_enuSetPinDir+0xb2>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
 184:	81 b3       	in	r24, 0x11	; 17
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_enuSetPinDir+0xca>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_enuSetPinDir+0xc6>
 192:	48 2b       	or	r20, r24
 194:	41 bb       	out	0x11, r20	; 17
					break;
			}
			Local_enuErrorState = ES_OK;
 196:	80 e0       	ldi	r24, 0x00	; 0
					DDRC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 198:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	08 95       	ret
				case DIO_PORTD:
					DDRD &= ~(BIT_MASK << Copy_uint8PinID);
					DDRD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
 1a4:	08 95       	ret

000001a6 <DIO_enuSetPinValue>:

ErrorStates_t DIO_enuSetPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID, uint8 Copy_uint8Value){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <DIO_enuSetPinValue+0x6>
 1aa:	68 c0       	rjmp	.+208    	; 0x27c <DIO_enuSetPinValue+0xd6>
		if(Copy_uint8PinID <= DIO_PIN7){
 1ac:	68 30       	cpi	r22, 0x08	; 8
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <DIO_enuSetPinValue+0xc>
 1b0:	67 c0       	rjmp	.+206    	; 0x280 <DIO_enuSetPinValue+0xda>
			switch(Copy_uint8PortID){
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	f1 f0       	breq	.+60     	; 0x1f2 <DIO_enuSetPinValue+0x4c>
 1b6:	30 f0       	brcs	.+12     	; 0x1c4 <DIO_enuSetPinValue+0x1e>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	91 f1       	breq	.+100    	; 0x220 <DIO_enuSetPinValue+0x7a>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_enuSetPinValue+0x1c>
 1c0:	46 c0       	rjmp	.+140    	; 0x24e <DIO_enuSetPinValue+0xa8>
 1c2:	60 c0       	rjmp	.+192    	; 0x284 <DIO_enuSetPinValue+0xde>
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
 1c4:	2b b3       	in	r18, 0x1b	; 27
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	06 2e       	mov	r0, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_enuSetPinValue+0x2c>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_enuSetPinValue+0x28>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
 1dc:	8b b3       	in	r24, 0x1b	; 27
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_enuSetPinValue+0x40>
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_enuSetPinValue+0x3c>
 1ea:	48 2b       	or	r20, r24
 1ec:	4b bb       	out	0x1b, r20	; 27
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					PORTA &= ~(BIT_MASK << Copy_uint8PinID);
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 1f0:	08 95       	ret
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	06 2e       	mov	r0, r22
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_enuSetPinValue+0x5a>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_enuSetPinValue+0x56>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	88 bb       	out	0x18, r24	; 24
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_enuSetPinValue+0x6e>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_enuSetPinValue+0x6a>
 218:	48 2b       	or	r20, r24
 21a:	48 bb       	out	0x18, r20	; 24
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 21c:	80 e0       	ldi	r24, 0x00	; 0
					PORTA |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					PORTB &= ~(BIT_MASK << Copy_uint8PinID);
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 21e:	08 95       	ret
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	06 2e       	mov	r0, r22
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_enuSetPinValue+0x88>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_enuSetPinValue+0x84>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	85 bb       	out	0x15, r24	; 21
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_enuSetPinValue+0x9c>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_enuSetPinValue+0x98>
 246:	48 2b       	or	r20, r24
 248:	45 bb       	out	0x15, r20	; 21
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
					PORTB |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					PORTC &= ~(BIT_MASK << Copy_uint8PinID);
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 24c:	08 95       	ret
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
 24e:	22 b3       	in	r18, 0x12	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	06 2e       	mov	r0, r22
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_enuSetPinValue+0xb6>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_enuSetPinValue+0xb2>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	82 bb       	out	0x12, r24	; 18
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
 266:	82 b3       	in	r24, 0x12	; 18
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_enuSetPinValue+0xca>
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_enuSetPinValue+0xc6>
 274:	48 2b       	or	r20, r24
 276:	42 bb       	out	0x12, r20	; 18
					break;
			}
			Local_enuErrorState = ES_OK;
 278:	80 e0       	ldi	r24, 0x00	; 0
					PORTC |= (Copy_uint8Value << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
 27a:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	08 95       	ret
				case DIO_PORTD:
					PORTD &= ~(BIT_MASK << Copy_uint8PinID);
					PORTD |= (Copy_uint8Value << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 284:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
 286:	08 95       	ret

00000288 <DIO_enuTogPinValue>:

ErrorStates_t DIO_enuTogPinValue(uint8 Copy_uint8PortID, uint8 Copy_uint8PinID){
	ErrorStates_t Local_enuErrorState = ES_NOK;

	if(Copy_uint8PortID <= DIO_PORTD){
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	d0 f5       	brcc	.+116    	; 0x300 <DIO_enuTogPinValue+0x78>
		if(Copy_uint8PinID <= DIO_PIN7){
 28c:	68 30       	cpi	r22, 0x08	; 8
 28e:	d0 f5       	brcc	.+116    	; 0x304 <DIO_enuTogPinValue+0x7c>
			switch(Copy_uint8PortID){
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <DIO_enuTogPinValue+0x30>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <DIO_enuTogPinValue+0x18>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	d9 f0       	breq	.+54     	; 0x2d0 <DIO_enuTogPinValue+0x48>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	29 f1       	breq	.+74     	; 0x2e8 <DIO_enuTogPinValue+0x60>
 29e:	34 c0       	rjmp	.+104    	; 0x308 <DIO_enuTogPinValue+0x80>
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_enuTogPinValue+0x24>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_enuTogPinValue+0x20>
 2b0:	82 27       	eor	r24, r18
 2b2:	8b bb       	out	0x1b, r24	; 27
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	if(Copy_uint8PortID <= DIO_PORTD){
		if(Copy_uint8PinID <= DIO_PIN7){
			switch(Copy_uint8PortID){
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
					break;
 2b6:	08 95       	ret
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
 2b8:	28 b3       	in	r18, 0x18	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_enuTogPinValue+0x3c>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_enuTogPinValue+0x38>
 2c8:	82 27       	eor	r24, r18
 2ca:	88 bb       	out	0x18, r24	; 24
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTA:
					PORTA ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
					break;
 2ce:	08 95       	ret
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_enuTogPinValue+0x54>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_enuTogPinValue+0x50>
 2e0:	82 27       	eor	r24, r18
 2e2:	85 bb       	out	0x15, r24	; 21
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTB:
					PORTB ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
					break;
 2e6:	08 95       	ret
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
 2e8:	22 b3       	in	r18, 0x12	; 18
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_enuTogPinValue+0x6c>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_enuTogPinValue+0x68>
 2f8:	82 27       	eor	r24, r18
 2fa:	82 bb       	out	0x12, r24	; 18
					break;
			}
			Local_enuErrorState = ES_OK;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_PORTC:
					PORTC ^= (BIT_MASK << Copy_uint8PinID);
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
 2fe:	08 95       	ret
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
		}
	}
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	08 95       	ret
					break;
			}
			Local_enuErrorState = ES_OK;
		}
		else{
			Local_enuErrorState = ES_PIN_OUT_OF_RANGE;
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	08 95       	ret
					break;
				case DIO_PORTD:
					PORTD ^= (BIT_MASK << Copy_uint8PinID);
					break;
			}
			Local_enuErrorState = ES_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0
	else{
		Local_enuErrorState = ES_PORT_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
 30a:	08 95       	ret

0000030c <EXINT_enuInit>:
	}
	else{
		Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
	}
	return Local_enuErrorStates;
}
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	77 c0       	rjmp	.+238    	; 0x400 <__EEPROM_REGION_LENGTH__>
 312:	29 2f       	mov	r18, r25
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	e2 0f       	add	r30, r18
 31e:	f3 1f       	adc	r31, r19
 320:	e0 5a       	subi	r30, 0xA0	; 160
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	41 81       	ldd	r20, Z+1	; 0x01
 326:	40 35       	cpi	r20, 0x50	; 80
 328:	09 f0       	breq	.+2      	; 0x32c <EXINT_enuInit+0x20>
 32a:	69 c0       	rjmp	.+210    	; 0x3fe <EXINT_enuInit+0xf2>
 32c:	85 b7       	in	r24, 0x35	; 53
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	85 bf       	out	0x35, r24	; 53
 332:	85 b7       	in	r24, 0x35	; 53
 334:	8d 7f       	andi	r24, 0xFD	; 253
 336:	85 bf       	out	0x35, r24	; 53
 338:	85 b7       	in	r24, 0x35	; 53
 33a:	8b 7f       	andi	r24, 0xFB	; 251
 33c:	85 bf       	out	0x35, r24	; 53
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	87 7f       	andi	r24, 0xF7	; 247
 342:	85 bf       	out	0x35, r24	; 53
 344:	84 b7       	in	r24, 0x34	; 52
 346:	8f 7b       	andi	r24, 0xBF	; 191
 348:	84 bf       	out	0x34, r24	; 52
 34a:	8f b7       	in	r24, 0x3f	; 63
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	8f bf       	out	0x3f, r24	; 63
 350:	f9 01       	movw	r30, r18
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e2 0f       	add	r30, r18
 358:	f3 1f       	adc	r31, r19
 35a:	e0 5a       	subi	r30, 0xA0	; 160
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	80 81       	ld	r24, Z
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	c1 f0       	breq	.+48     	; 0x394 <EXINT_enuInit+0x88>
 364:	18 f0       	brcs	.+6      	; 0x36c <EXINT_enuInit+0x60>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	71 f1       	breq	.+92     	; 0x3c6 <EXINT_enuInit+0xba>
 36a:	48 c0       	rjmp	.+144    	; 0x3fc <EXINT_enuInit+0xf0>
 36c:	8b b7       	in	r24, 0x3b	; 59
 36e:	80 64       	ori	r24, 0x40	; 64
 370:	8b bf       	out	0x3b, r24	; 59
 372:	45 b7       	in	r20, 0x35	; 53
 374:	f9 01       	movw	r30, r18
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	2e 0f       	add	r18, r30
 37c:	3f 1f       	adc	r19, r31
 37e:	f9 01       	movw	r30, r18
 380:	e0 5a       	subi	r30, 0xA0	; 160
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	82 81       	ldd	r24, Z+2	; 0x02
 386:	84 2b       	or	r24, r20
 388:	85 bf       	out	0x35, r24	; 53
 38a:	8a b7       	in	r24, 0x3a	; 58
 38c:	80 64       	ori	r24, 0x40	; 64
 38e:	8a bf       	out	0x3a, r24	; 58
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	35 c0       	rjmp	.+106    	; 0x3fe <EXINT_enuInit+0xf2>
 394:	8b b7       	in	r24, 0x3b	; 59
 396:	80 68       	ori	r24, 0x80	; 128
 398:	8b bf       	out	0x3b, r24	; 59
 39a:	45 b7       	in	r20, 0x35	; 53
 39c:	f9 01       	movw	r30, r18
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	e2 0f       	add	r30, r18
 3a4:	f3 1f       	adc	r31, r19
 3a6:	e0 5a       	subi	r30, 0xA0	; 160
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	82 81       	ldd	r24, Z+2	; 0x02
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	24 2b       	or	r18, r20
 3ba:	25 bf       	out	0x35, r18	; 53
 3bc:	8a b7       	in	r24, 0x3a	; 58
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	8a bf       	out	0x3a, r24	; 58
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	1c c0       	rjmp	.+56     	; 0x3fe <EXINT_enuInit+0xf2>
 3c6:	8b b7       	in	r24, 0x3b	; 59
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	8b bf       	out	0x3b, r24	; 59
 3cc:	f9 01       	movw	r30, r18
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	2e 0f       	add	r18, r30
 3d4:	3f 1f       	adc	r19, r31
 3d6:	f9 01       	movw	r30, r18
 3d8:	e0 5a       	subi	r30, 0xA0	; 160
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <EXINT_enuInit+0xdc>
 3e2:	84 b7       	in	r24, 0x34	; 52
 3e4:	84 bf       	out	0x34, r24	; 52
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <EXINT_enuInit+0xe6>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <EXINT_enuInit+0xe6>
 3ec:	84 b7       	in	r24, 0x34	; 52
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	84 bf       	out	0x34, r24	; 52
 3f2:	8a b7       	in	r24, 0x3a	; 58
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	8a bf       	out	0x3a, r24	; 58
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <EXINT_enuInit+0xf2>
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	9f 5f       	subi	r25, 0xFF	; 255
 400:	99 23       	and	r25, r25
 402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	86 cf       	rjmp	.-244    	; 0x312 <EXINT_enuInit+0x6>
 406:	08 95       	ret

00000408 <EXINT_enuCallBack>:

ErrorStates_t EXINT_enuCallBack(void (*Copy_pvoidfunCall)(void*), void *Copy_pvoidParameter, uint8 Copy_uint8IntID){
	ErrorStates_t Local_enuErrorStates = ES_NOK;
	if(Copy_pvoidfunCall != NULL){
 408:	00 97       	sbiw	r24, 0x00	; 0
 40a:	21 f1       	breq	.+72     	; 0x454 <EXINT_enuCallBack+0x4c>
		switch(Copy_uint8IntID){
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	71 f0       	breq	.+28     	; 0x42c <EXINT_enuCallBack+0x24>
 410:	18 f0       	brcs	.+6      	; 0x418 <EXINT_enuCallBack+0x10>
 412:	42 30       	cpi	r20, 0x02	; 2
 414:	a9 f0       	breq	.+42     	; 0x440 <EXINT_enuCallBack+0x38>
 416:	20 c0       	rjmp	.+64     	; 0x458 <EXINT_enuCallBack+0x50>
			case EXINT_INT0:
				EXINT_pvoidfuncCallBack[EXINT_INT0] = Copy_pvoidfunCall;
 418:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <EXINT_pvoidfuncCallBack+0x1>
 41c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <EXINT_pvoidfuncCallBack>
				EXINT_pvoidParameter[EXINT_INT0] = Copy_pvoidParameter;
 420:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x1>
 424:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end>
				Local_enuErrorStates = ES_OK;
 428:	80 e0       	ldi	r24, 0x00	; 0
				break;
 42a:	08 95       	ret
			case EXINT_INT1:
				EXINT_pvoidfuncCallBack[EXINT_INT1] = Copy_pvoidfunCall;
 42c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <counts.1707+0x1>
 430:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <counts.1707>
				EXINT_pvoidParameter[EXINT_INT1] = Copy_pvoidParameter;
 434:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <EXINT_pvoidfuncCallBack+0x1>
 438:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <EXINT_pvoidfuncCallBack>
				Local_enuErrorStates = ES_OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
				break;
 43e:	08 95       	ret
			case EXINT_INT2:
				EXINT_pvoidfuncCallBack[EXINT_INT2] = Copy_pvoidfunCall;
 440:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counts.1707+0x3>
 444:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counts.1707+0x2>
				EXINT_pvoidParameter[EXINT_INT2] = Copy_pvoidParameter;
 448:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <counts.1707+0x1>
 44c:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <counts.1707>
				Local_enuErrorStates = ES_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
				break;
 452:	08 95       	ret
				Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
				break;
		}
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	08 95       	ret
				EXINT_pvoidfuncCallBack[EXINT_INT2] = Copy_pvoidfunCall;
				EXINT_pvoidParameter[EXINT_INT2] = Copy_pvoidParameter;
				Local_enuErrorStates = ES_OK;
				break;
			default:
				Local_enuErrorStates = ES_EXINT_OUT_OF_RANGE;
 458:	87 e0       	ldi	r24, 0x07	; 7
	}
	else{
		Local_enuErrorStates = ES_NULL_POINTER;
	}
	return Local_enuErrorStates;
}
 45a:	08 95       	ret

0000045c <__vector_1>:

ISR(EX_INT0_VECT){
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT0] != NULL){
 47e:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXINT_pvoidfuncCallBack>
 482:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXINT_pvoidfuncCallBack+0x1>
 486:	30 97       	sbiw	r30, 0x00	; 0
 488:	29 f0       	breq	.+10     	; 0x494 <__vector_1+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT0](EXINT_pvoidParameter[EXINT_INT0]);
 48a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 48e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 492:	09 95       	icall
	}
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_2>:

ISR(EX_INT1_VECT){
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT1] != NULL){
 4d8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <counts.1707>
 4dc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <counts.1707+0x1>
 4e0:	30 97       	sbiw	r30, 0x00	; 0
 4e2:	29 f0       	breq	.+10     	; 0x4ee <__vector_2+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT1](EXINT_pvoidParameter[EXINT_INT1]);
 4e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <EXINT_pvoidfuncCallBack>
 4e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <EXINT_pvoidfuncCallBack+0x1>
 4ec:	09 95       	icall
	}
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_3>:

ISR(EX_INT2_VECT){
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	if(EXINT_pvoidfuncCallBack[EXINT_INT2] != NULL){
 532:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <counts.1707+0x2>
 536:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <counts.1707+0x3>
 53a:	30 97       	sbiw	r30, 0x00	; 0
 53c:	29 f0       	breq	.+10     	; 0x548 <__vector_3+0x38>
		EXINT_pvoidfuncCallBack[EXINT_INT2](EXINT_pvoidParameter[EXINT_INT2]);
 53e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <counts.1707>
 542:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counts.1707+0x1>
 546:	09 95       	icall
	}
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_11>:

	TIMSK |= (BIT_MASK1 << TIMER0_OCIE0_BIT);
	return Local_enuErrorStates;
}

ISR(TIMER0_OVF_VECT){
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31

	static uint32 counts = 0;
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF] != NULL){
 58c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TIMER0_ApfuncCalledFuncs>
 590:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <TIMER0_ApfuncCalledFuncs+0x1>
 594:	89 2b       	or	r24, r25
 596:	a1 f1       	breq	.+104    	; 0x600 <__vector_11+0x96>
		counts++;
 598:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <counts.1707>
 59c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counts.1707+0x1>
 5a0:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <counts.1707+0x2>
 5a4:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <counts.1707+0x3>
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	a1 1d       	adc	r26, r1
 5ac:	b1 1d       	adc	r27, r1
 5ae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <counts.1707>
 5b2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <counts.1707+0x1>
 5b6:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <counts.1707+0x2>
 5ba:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <counts.1707+0x3>
		if(counts == TIMER0_uint32NumOVF){
 5be:	40 91 75 00 	lds	r20, 0x0075	; 0x800075 <TIMER0_uint32NumOVF>
 5c2:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <TIMER0_uint32NumOVF+0x1>
 5c6:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <TIMER0_uint32NumOVF+0x2>
 5ca:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <TIMER0_uint32NumOVF+0x3>
 5ce:	84 17       	cp	r24, r20
 5d0:	95 07       	cpc	r25, r21
 5d2:	a6 07       	cpc	r26, r22
 5d4:	b7 07       	cpc	r27, r23
 5d6:	a1 f4       	brne	.+40     	; 0x600 <__vector_11+0x96>
			counts = 0;
 5d8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <counts.1707>
 5dc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <counts.1707+0x1>
 5e0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counts.1707+0x2>
 5e4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counts.1707+0x3>
			TCNT0 = TIMER0_uint32Preload;
 5e8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TIMER0_uint32Preload>
 5ec:	82 bf       	out	0x32, r24	; 50
			TIMER0_ApfuncCalledFuncs[TIMER0_INT_OVF](TIMER0_ApvoidParameters[TIMER0_INT_OVF]);
 5ee:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMER0_ApfuncCalledFuncs>
 5f2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMER0_ApfuncCalledFuncs+0x1>
 5f6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TIMER0_ApvoidParameters>
 5fa:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <TIMER0_ApvoidParameters+0x1>
 5fe:	09 95       	icall
		}
	}
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <__vector_10>:

ISR(TIMER0_COMP_VECT){
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	2f 93       	push	r18
 62e:	3f 93       	push	r19
 630:	4f 93       	push	r20
 632:	5f 93       	push	r21
 634:	6f 93       	push	r22
 636:	7f 93       	push	r23
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
 63c:	af 93       	push	r26
 63e:	bf 93       	push	r27
 640:	ef 93       	push	r30
 642:	ff 93       	push	r31
	if(TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP] != NULL){
 644:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER0_ApfuncCalledFuncs+0x2>
 648:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER0_ApfuncCalledFuncs+0x3>
 64c:	30 97       	sbiw	r30, 0x00	; 0
 64e:	29 f0       	breq	.+10     	; 0x65a <__vector_10+0x38>
		TIMER0_ApfuncCalledFuncs[TIMER0_INT_COMP](TIMER0_ApvoidParameters[TIMER0_INT_COMP]);
 650:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <TIMER0_ApvoidParameters+0x2>
 654:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <TIMER0_ApvoidParameters+0x3>
 658:	09 95       	icall
	}
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
